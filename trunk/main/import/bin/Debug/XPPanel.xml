<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XPPanel</name>
    </assembly>
    <members>
        <member name="T:UIComponents.BaseColorCollection">
            <summary>
            <c>BaseColorCollection</c> provides a simple, array-based container for
            a group of <see cref="T:System.Drawing.Color"/> instances
            </summary>
            <remarks>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            <para>This class provides an implementation for <see cref="T:System.Collections.ICollection"/> but is <b>not</b> defined as 
            such because it causes issues with the IDE designer</para>
            </remarks>
        </member>
        <member name="F:UIComponents.BaseColorCollection.colors">
            <summary>
            Where each <see cref="T:System.Drawing.Color"/> is stored
            </summary>
        </member>
        <member name="M:UIComponents.BaseColorCollection.#ctor(System.Int32)">
            <summary>
            Construct a new <c>BaseColorCollection</c> that holds the specified
            number of <see cref="T:System.Drawing.Color"/> items
            </summary>
            <param name="numColors">The number of colors to be stored in the collection</param>
        </member>
        <member name="M:UIComponents.BaseColorCollection.#ctor(UIComponents.BaseColorCollection)">
            <summary>
            Copy construct a new <c>BaseColorCollection</c>
            </summary>
            <param name="other">The BaseColorCollection to copy</param>
        </member>
        <member name="M:UIComponents.BaseColorCollection.Clone">
            <summary>
            Clone this <c>BaseColorCollection</c>
            </summary>
            <returns>
            A clone of this <c>BaseColorCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.BaseColorCollection.Equals(System.Object)">
            <summary>
            Determine if two <c>BaseColorCollections</c> are equivalent
            </summary>
            <param name="obj">The other <c>BaseColorCollection</c></param>
            <returns>
            <see langword="true"/> if the two collections are equal, <see langword="false"/>
            otherwise
            </returns>
        </member>
        <member name="M:UIComponents.BaseColorCollection.GetHashCode">
            <summary>
            Overridden to avoid warning when we override <see cref="M:UIComponents.BaseColorCollection.Equals(System.Object)"/>
            </summary>
            <returns>
            The hashcode for the <c>BaseColorCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.BaseColorCollection.ToColorString(System.Drawing.Color)">
            <summary>
            Custom method for converting a <see cref="T:System.Drawing.Color"/> value to a string
            </summary>
            <param name="color">The color to stringify</param>
            <returns>
            String representation of the <see cref="T:System.Drawing.Color"/> value.
            </returns>
            <remarks>
            <seealso cref="M:System.Drawing.Color.ToString"/>
            </remarks>
        </member>
        <member name="M:UIComponents.BaseColorCollection.GetColorItemName(System.Int32)">
            <summary>
            For sub-classes to override and provide an index specific name
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.BaseColorCollection.ToString">
            <summary>
            Provide a reasonable string representation for the <see cref="T:System.Drawing.Color"/> values in the
            collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIComponents.BaseColorCollection.OnColorChange(System.Int32)">
            <summary>
            Hook for derived classes to provide ColorChange events
            </summary>
            <param name="index">The color index that changed</param>
            <remarks>
            <c>BaseColorCollection</c> does not directly provide ColorChange
            events. This hook exists so that sub-classes may provide it if
            desired
            </remarks>
        </member>
        <member name="M:UIComponents.BaseColorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the contents of the <c>BaseColorCollection</c> to the specified <see cref="T:System.Array"/> starting
            at the specified index
            </summary>
            <param name="array">The destination array</param>
            <param name="index">The initial index within the destination array</param>
        </member>
        <member name="M:UIComponents.BaseColorCollection.GetEnumerator">
            <summary>
            Return an <see cref="T:System.Collections.IEnumerator"/> for the items in the <c>BaseColorCollection</c>
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the <c>colors</c> array
            </returns>
        </member>
        <member name="P:UIComponents.BaseColorCollection.Item(System.Int32)">
            <summary>
            Get/Set a <see cref="T:System.Drawing.Color"/> at the specified index
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">If <c>index</c> is not within the bounds of
            the collection</exception>
        </member>
        <member name="P:UIComponents.BaseColorCollection.IsEmpty">
            <summary>
            Determine if all the <see cref="T:System.Drawing.Color"/> items in the collection are
            equivalent to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
            A color collection is <i>Empty</i> if it does not have any colors defined, 
            or all its colors are <see cref="F:System.Drawing.Color.Empty"/>
        </member>
        <member name="P:UIComponents.BaseColorCollection.IsTransparent">
            <summary>
            Determine if all the <see cref="T:System.Drawing.Color"/> items in the collection are
            equivalent to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
            <remarks>
            A color collection is <i>Transparent</i> if it has at least one color, and
            all its colors are <see cref="P:System.Drawing.Color.Transparent"/>
            </remarks>
        </member>
        <member name="P:UIComponents.BaseColorCollection.IsSolid">
            <summary>
            Determine if all the <see cref="T:System.Drawing.Color"/> items in the collection are
            equivalent to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
            <remarks>
            A color collection is <i>solid</i> if it has at least one defined color
            (i.e., not <see cref="F:System.Drawing.Color.Empty"/> || <see cref="P:System.Drawing.Color.Transparent"/>)
            and all other defined colors are equivalent
            </remarks>
        </member>
        <member name="P:UIComponents.BaseColorCollection.IsSynchronized">
            <summary>
            BaseColorCollection is not synchronized
            </summary>
        </member>
        <member name="P:UIComponents.BaseColorCollection.Count">
            <summary>
            Return the number of items in the collection
            </summary>
        </member>
        <member name="P:UIComponents.BaseColorCollection.SyncRoot">
            <summary>
            Return the synchronization root of the <c>BaseColorCollection</c>
            </summary>
        </member>
        <member name="T:UIComponents.Designers.GradientColorEditor">
            <summary>
            Designer type editor for the <see cref="T:UIComponents.GradientColor"/> class
            </summary>
            <remarks>
            Provides a preview of the <see cref="T:UIComponents.GradientColor"/> in the designer property grid
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.GradientColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Yes we paint the value
            </summary>
            <param name="context">ignored</param>
            <returns><see langword="true"/> as we always show the preview</returns>
        </member>
        <member name="M:UIComponents.Designers.GradientColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Draw a preview of the <see cref="T:UIComponents.GradientColor"/>
            </summary>
            <param name="e">The paint event args providing the <see cref="T:System.Drawing.Graphics"/> and bounding
            rectangle</param>
        </member>
        <member name="T:UIComponents.Designers.ColorPairEditor">
            <summary>
            Designer type editor for the ColorPair class
            </summary>
            <remarks>
            Provides a preview of the <see cref="T:UIComponents.ColorPair"/> in the designer property grid
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.ColorPairEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Yes we paint the value
            </summary>
            <param name="context">ignored</param>
            <returns><see langword="true"/> as we always show the preview</returns>
        </member>
        <member name="M:UIComponents.Designers.ColorPairEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Draw a preview of the <see cref="T:UIComponents.ColorPair"/>
            </summary>
            <param name="e">The paint event args providing the <see cref="T:System.Drawing.Graphics"/> and bounding
            rectangle</param>
        </member>
        <member name="T:UIComponents.Designers.HSLColorEditor">
            <summary>
            Designer type editor for the <see cref="T:UIComponents.HSLColor"/> class
            </summary>
            <remarks>
            Provides a preview of the <see cref="T:UIComponents.HSLColor"/> in the designer property grid,
             as well as a custom editor (<see cref="T:System.Windows.Forms.ColorDialog"/>) for 
             selecting/defining a <see cref="T:System.Drawing.Color"/> value
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.HSLColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Yes we paint the value
            </summary>
            <param name="context">ignored</param>
            <returns><see langword="true"/> as we always show the preview</returns>
        </member>
        <member name="M:UIComponents.Designers.HSLColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paint the preview
            </summary>
            <param name="e">The paint event args providing the <see cref="T:System.Drawing.Graphics"/> and bounding
            rectangle</param>
            <remarks>
            A simple solid fill
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.HSLColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Tell the designer we use a dialog stype editor
            </summary>
            <param name="context">The designer context</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal"/> if we have a valid context and instance, otherwise
            whatever the base class says
            </returns>
        </member>
        <member name="M:UIComponents.Designers.HSLColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Creates a <see cref="T:System.Windows.Forms.ColorDialog"/> to allow the user to
            select/define a <see cref="T:System.Drawing.Color"/> value
            </summary>
            <param name="context">The designer context</param>
            <param name="provider">The designer service provided</param>
            <param name="value">The <see cref="T:UIComponents.HSLColor"/> value being edited</param>
            <returns>
            A new <see cref="T:UIComponents.HSLColor"/> value if the user successfully completes the dialog,
            otherwise the original <see cref="T:UIComponents.HSLColor"/>
            </returns>
        </member>
        <member name="T:UIComponents.AbstractColorPair">
            <summary>
            Abstract implementaiton of ColorPair
            </summary>
            <remarks>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.AbstractColorPair.colorChangeListeners">
            <summary>
            ColorChange listeners
            </summary>
        </member>
        <member name="M:UIComponents.AbstractColorPair.#ctor">
            <summary>
            Construct a new <c>AbstractColorPair</c> where both entries
            are equal to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="M:UIComponents.AbstractColorPair.#ctor(System.Drawing.Color)">
            <summary>
            Construct a new <c>AbstractColorPair</c> where both entries
            are equal to the specified <see cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="M:UIComponents.AbstractColorPair.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Construct a new <c>AbstractColorPair</c> initializing
            the entries to the specified <see cref="T:System.Drawing.Color"/> values
            </summary>
        </member>
        <member name="M:UIComponents.AbstractColorPair.#ctor(UIComponents.BaseColorCollection)">
            <summary>
            Create an <c>AbstractColorPair</c> from another 
            <c>BaseColorCollection</c>
            </summary>
            <param name="colors">The other <c>BaseColorCollection</c></param>
            <remarks>
            Only the 1st and 2nd color are considered. If the <c>colors</c>
            collection only contains a single color, both color entries are
            equal to that value. If zero colors are specified in colors
            then both values are the default, <see cref="F:System.Drawing.Color.Empty"/>
            </remarks>
        </member>
        <member name="M:UIComponents.AbstractColorPair.GetColorItemType">
            <summary>
            Returns the enumeration type that describes the <c>AbstractColorPair</c>
            <see cref="T:System.Drawing.Color"/> values
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIComponents.AbstractColorPair.GetColorItemName(System.Int32)">
            <summary>
            Gets the stringified form of the color index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.AbstractColorPair.OnColorChange(System.Int32)">
            <summary>
            Fires a <c>ColorChange</c> event to any listeners
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:UIComponents.AbstractColorPair.Color1">
            <summary>
            Return the 1st color entry 
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.Color2">
            <summary>
            Return the 2nd color entry
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.IsSolid">
            <summary>
            <see langword="true"/> if the <see cref="P:UIComponents.AbstractColorPair.Color1"/> and <see cref="P:UIComponents.AbstractColorPair.Color2"/>
            color values are equivalent (i.e, a solid fill)
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.IsEmpty">
            <summary>
            <see langword="true"/> if the <see cref="P:UIComponents.AbstractColorPair.Color1"/> and <see cref="P:UIComponents.AbstractColorPair.Color1"/>
            color values are <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.IsTransparent">
            <summary>
            <see langword="true"/> if the <see cref="P:UIComponents.AbstractColorPair.Color1"/> and <see cref="P:UIComponents.AbstractColorPair.Color1"/>
            color values are <see cref="P:System.Drawing.Color.Transparent"/>
            </summary>
        </member>
        <member name="E:UIComponents.AbstractColorPair.ColorChange">
            <summary>
            Add/Remove a <c>ColorChange</c> event listener
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.Item(UIComponents.AbstractColorPair.AbstractColorPairType)">
            <summary>
            Get/Set a color entry using a <see cref="T:UIComponents.AbstractColorPair.AbstractColorPairType"/>
            </summary>
            <remarks>
            Custom indexer that translates a <see cref="T:UIComponents.AbstractColorPair.AbstractColorPairType"/>
            to the appropriate index for the base class		
            </remarks>
        </member>
        <member name="T:UIComponents.AbstractColorPair.AbstractColorPairType">
            <summary>
            Generic indices for <see cref="T:UIComponents.AbstractColorPair"/> entries
            </summary>
        </member>
        <member name="F:UIComponents.AbstractColorPair.AbstractColorPairType.Color1">
            <summary>
            1st color entry (of 2)
            </summary>
        </member>
        <member name="F:UIComponents.AbstractColorPair.AbstractColorPairType.Color2">
            <summary>
            2nd color entry (of 2)
            </summary>
        </member>
        <member name="T:UIComponents.AbstractColorPair.ColorChangeEventArgs">
            <summary>
            <see cref="E:UIComponents.AbstractColorPair.ColorChange"/> event arguments 
            </summary>
        </member>
        <member name="F:UIComponents.AbstractColorPair.ColorChangeEventArgs.colorPairType">
            <summary>
            Enumeration/Index of the changed color entry
            </summary>
        </member>
        <member name="M:UIComponents.AbstractColorPair.ColorChangeEventArgs.#ctor(UIComponents.AbstractColorPair.AbstractColorPairType)">
            <summary>
            Construct a new ColorChangeEventArgs with the specified
            value
            </summary>
            <param name="colorPairType">The index of the color entry that changed</param>
        </member>
        <member name="P:UIComponents.AbstractColorPair.ColorChangeEventArgs.ColorPairType">
            <summary>
            Get the enumeration for the color entry that changed
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.ColorChangeEventArgs.IsColor1">
            <summary>
            <see langword="true"/> if the 1st color entry changed
            </summary>
        </member>
        <member name="P:UIComponents.AbstractColorPair.ColorChangeEventArgs.IsColor2">
            <summary>
            <see langword="true"/> if the 2nd color entry changed
            </summary>
        </member>
        <member name="T:UIComponents.ColorPair">
            <summary>
            ColorPair is a concrete implementation of <see cref="T:UIComponents.AbstractColorPair"/> and
            describes two related colors
            </summary>
            <remarks>
            <c>ColorPair</c> uses a customized UITypeEditor (<see cref="T:UIComponents.Designers.ColorPairEditor"/>)
            for better IDE integration, as well as a custom <see cref="T:System.ComponentModel.TypeConverter"/> 
            (<see cref="T:UIComponents.Designers.ColorPairConverter"/>)
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.ColorPair.#ctor">
            <summary>
            Create a <c>ColorPair</c> where both <see cref="T:System.Drawing.Color"/> values
            are <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="M:UIComponents.ColorPair.#ctor(System.Drawing.Color)">
            <summary>
            Create a <c>ColorPair</c> where both <see cref="T:System.Drawing.Color"/> values
            are equal to the specified value
            </summary>
        </member>
        <member name="M:UIComponents.ColorPair.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create a <c>ColorPair</c> initialized to the specified 
            <see cref="T:System.Drawing.Color"/> values
            </summary>
        </member>
        <member name="M:UIComponents.ColorPair.#ctor(UIComponents.BaseColorCollection)">
            <summary>
            Create a <c>ColorPair</c> form the specified <see cref="T:UIComponents.BaseColorCollection"/>
            </summary>
            <param name="colors">The <see cref="T:UIComponents.BaseColorCollection"/> to initialize
            from</param>
            <remarks>
            See <see cref="M:UIComponents.AbstractColorPair.#ctor(UIComponents.BaseColorCollection)"/> for more
            details
            </remarks>
        </member>
        <member name="M:UIComponents.ColorPair.Clone">
            <summary>
            Clone this <c>ColorPair</c>
            </summary>
            <returns>
            A clone of this <c>ColorPair</c>
            </returns>
        </member>
        <member name="M:UIComponents.ColorPair.ShouldSerializeForeground">
            <summary>
            Determine if the foreground color needs to be serialized (designer code
            generation)
            </summary>
            <returns>
            <see langword="true"/> if the foreground <see cref="T:System.Drawing.Color"/> value
            is not equal to the default (<see cref="F:System.Drawing.Color.Empty"/>)
            </returns>
        </member>
        <member name="M:UIComponents.ColorPair.ResetForeground">
            <summary>
            Reset the foreground <see cref="T:System.Drawing.Color"/> value to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="M:UIComponents.ColorPair.ShouldSerializeBackground">
            <summary>
            Determine if the background color needs to be serialized (designer code
            generation)
            </summary>
            <returns>
            <see langword="true"/> if the background <see cref="T:System.Drawing.Color"/> value
            is not equal to the default (<see cref="F:System.Drawing.Color.Empty"/>)
            </returns>
        </member>
        <member name="M:UIComponents.ColorPair.ResetBackground">
            <summary>
            Reset the background <see cref="T:System.Drawing.Color"/> value to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="M:UIComponents.ColorPair.GetColorItemType">
            <summary>
            Override to provide our 'custom' enumeration for our color indices
            </summary>
            <returns>
            typeof(ColorPairType)
            </returns>
        </member>
        <member name="P:UIComponents.ColorPair.Foreground">
            <summary>
            Returns the foreground color (1st color) of the <c>ColorPair</c>
            </summary>
        </member>
        <member name="P:UIComponents.ColorPair.Background">
            <summary>
            Returns the background color (2nd color) of the <c>ColorPair</c>
            </summary>
        </member>
        <member name="T:UIComponents.ColorPair.ColorPairType">
            <summary>
            Enumeration used for ToString()
            <see cref="M:UIComponents.ColorPair.GetColorItemType"/>
            </summary>
        </member>
        <member name="F:UIComponents.ColorPair.ColorPairType.Foreground">
            <summary>
            Foreground is Color1
            </summary>
        </member>
        <member name="F:UIComponents.ColorPair.ColorPairType.Background">
            <summary>
            Background is Color2
            </summary>
        </member>
        <member name="T:UIComponents.Designers.GradientColorConverter">
            <summary>
            A custom TypeConvert for GradientColor objects  
            </summary>
        </member>
        <member name="M:UIComponents.Designers.GradientColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Provide a <see cref="T:System.String"/> representation for the designer property grid
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization info</param>
            <param name="value"><see cref="T:UIComponents.GradientColor"/> to be converted</param>
            <param name="destinationType">Expected to be <see cref="T:UIComponents.GradientColor"/></param>
            <returns>
            A simple <see cref="T:System.String"/> representation when that type is requested
            </returns>
        </member>
        <member name="M:UIComponents.Designers.GradientColorConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Construct a <see cref="T:UIComponents.GradientColor"/> from the properties in a <see cref="T:System.Collections.IDictionary"/>
            </summary>
            <param name="context">designer context</param>
            <param name="propertyValues">The "serialized" values for the <see cref="T:UIComponents.GradientColor"/></param>
            <returns>
            A <see cref="T:UIComponents.GradientColor"/>
            </returns>
        </member>
        <member name="M:UIComponents.Designers.GradientColorConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            We support CreateInstance
            </summary>
            <param name="context">designer context</param>
            <returns>
            <see langword="true"/>
            </returns>
        </member>
        <member name="T:UIComponents.Designers.ColorPairConverter">
            <summary>
            A custom TypeConvert for <see cref="T:UIComponents.ColorPair"/> objects  
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ColorPairConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Provide a <see cref="T:System.String"/> representation for the designer property grid
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization info</param>
            <param name="value"><see cref="T:UIComponents.ColorPair"/> to be converted</param>
            <param name="destinationType">Expected to be <see cref="T:UIComponents.ColorPair"/></param>
            <returns>
            A simple <see cref="T:System.String"/> representation when that type is requested
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ColorPairConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Construct a <see cref="T:UIComponents.ColorPair"/> from the properties in a <see cref="T:System.Collections.IDictionary"/>
            </summary>
            <param name="context">designer context</param>
            <param name="propertyValues">The "serialized" values for the <see cref="T:UIComponents.ColorPair"/></param>
            <returns>
            A <see cref="T:UIComponents.ColorPair"/>
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ColorPairConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            We support CreateInstance
            </summary>
            <param name="context">designer context</param>
            <returns>
            <see langword="true"/>
            </returns>
        </member>
        <member name="T:UIComponents.Designers.HSLColorConverter">
            <summary>
            A custom TypeConvert for <see cref="T:UIComponents.HSLColor"/> objects  
            </summary>
        </member>
        <member name="M:UIComponents.Designers.HSLColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Provide a <see cref="T:System.String"/> representation for the designer property grid
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization info</param>
            <param name="value"><see cref="T:UIComponents.HSLColor"/> to be converted</param>
            <param name="destinationType">Expected to be <see cref="T:UIComponents.HSLColor"/></param>
            <returns>
            A simple <see cref="T:System.String"/> representation when that type is requested
            </returns>
            <remarks>
            What would be better is to display the current RGB byte values as R,G,B. E.g, 234,44,128
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.HSLColorConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Construct a <see cref="T:UIComponents.HSLColor"/> from the properties in a <see cref="T:System.Collections.IDictionary"/>
            </summary>
            <param name="context">designer context</param>
            <param name="propertyValues">The "serialized" values for the <see cref="T:UIComponents.HSLColor"/></param>
            <returns>
            A <see cref="T:UIComponents.HSLColor"/>
            </returns>
        </member>
        <member name="M:UIComponents.Designers.HSLColorConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            We support CreateInstance
            </summary>
            <param name="context">designer context</param>
            <returns>
            <see langword="true"/>
            </returns>
        </member>
        <member name="T:UIComponents.ExtendedColor">
            <summary>
            ExtendedColor allows colors to be defined/manipulated using HSL
            color values, and provides an implicit conversion to <see cref="P:UIComponents.ExtendedColor.Color"/>
            to make its use mostly transparent
            </summary>
            <remarks>
            The .NET Framework exposes HSL components of <see cref="P:UIComponents.ExtendedColor.Color"/> values in
            a read-only manner. This class allows those values to be written.
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.ExtendedColor.HueMaxValue">
            <summary>
            Hues are generally described as a circle, ergo 360.0d
            </summary>
        </member>
        <member name="F:UIComponents.ExtendedColor.SaturationMaxValue">
            <summary>
            Saturation values are normalized to the range 0.0 -> 1.0
            </summary>
        </member>
        <member name="F:UIComponents.ExtendedColor.BrightnessMaxValue">
            <summary>
            Brightness/Luminance values are normalized to the range 0.0 -> 1.0
            </summary>
        </member>
        <member name="F:UIComponents.ExtendedColor.RGBMaxValue">
            <summary>
            Maximum value for an RGB component (0 -> 255)
            </summary>
        </member>
        <member name="F:UIComponents.ExtendedColor.color">
            <summary>
            The current <see cref="P:UIComponents.ExtendedColor.Color"/> value of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="M:UIComponents.ExtendedColor.op_Implicit(UIComponents.ExtendedColor)~System.Drawing.Color">
            <summary>
            Implicitly (without casting) converts an <c>ExtendedColor</c>
            to a <see cref="P:UIComponents.ExtendedColor.Color"/> value
            </summary>
            <param name="extendedColor">The <c>ExtendedColor</c> to convert</param>
            <returns>
            The <see cref="P:UIComponents.ExtendedColor.Color"/> value for the <c>ExtendedColor</c>
            </returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.HueToRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts an intermediate Hue value to a normalized 
            RGB value (0.0 -> 1.0)
            </summary>
            <param name="m1">Intermediate value 1</param>
            <param name="m2">Intermediate value 2</param>
            <param name="hue">The normalized hue value</param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.HSLtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Convert an HSL definition to its RGB equivalent
            </summary>
            <param name="hue">Normalized hue</param>
            <param name="saturation">Normalized saturation</param>
            <param name="luminance">Normalized luminance</param>
            <returns>
            The equivalent <see cref="P:UIComponents.ExtendedColor.Color"/> value for the specified HSL definition
            </returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.#ctor(System.Drawing.Color)">
            <summary>
            Create an <c>ExtendedColor</c> from the specified <see cref="P:UIComponents.ExtendedColor.Color"/> value
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.#ctor(UIComponents.ExtendedColor)">
            <summary>
            Create an <c>ExtendedColor</c> from another <c>ExtendedColor</c>
            </summary>
            <param name="other">The other <c>ExtendedColor</c></param>
        </member>
        <member name="M:UIComponents.ExtendedColor.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Create an <c>ExtendedColor</c> from the specified <see cref="P:UIComponents.ExtendedColor.Color"/> value
            and specified saturation level
            </summary>
            <param name="color">The color</param>
            <param name="saturation">The new saturation value for the color</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create an <c>ExtendedColor</c> from the specified RGB values
            </summary>
            <param name="red">The Red component</param>
            <param name="green">The Green component</param>
            <param name="blue">The Blue component</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create an <c>ExtendedColor</c> from the specified HSL values
            </summary>
            <param name="hue">The hue component</param>
            <param name="saturation">The saturation component</param>
            <param name="luminance">The luminance component</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.CloneExtendedColor">
            <summary>
            Helper with correct return value
            </summary>
            <returns>
            A clone of this <c>ExtendedColor</c>
            </returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.Clone">
            <summary>
            Clone this <c>ExtendedColor</c>
            </summary>
            <returns>
            A clone of this <c>ExtendedColor</c>
            </returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.NonNormalizedHue(System.Double)">
            <summary>
            Convert a normalized hue value to its common non-normalized form
            (0 -> 360)
            </summary>
            <param name="hue">The normalized hue value</param>
            <returns>
            The equivalent hue value in degrees
            </returns>
        </member>
        <member name="M:UIComponents.ExtendedColor.AdjustHue(System.Double)">
            <summary>
            Modify the current hue component of the <c>ExtendedColor</c> by
            a percentage
            </summary>
            <param name="hueAdjustment">The percentage</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.AdjustSaturation(System.Double)">
            <summary>
            Modify the current saturation component of the <c>ExtendedColor</c> by
            a percentage
            </summary>
            <param name="saturationAdjustment">The percentage</param>
        </member>
        <member name="M:UIComponents.ExtendedColor.AdjustLuminance(System.Double)">
            <summary>
            Modify the current luminance component of the <c>ExtendedColor</c> by
            a percentage
            </summary>
            <param name="luminanceAdjustment">The percentage</param>
        </member>
        <member name="P:UIComponents.ExtendedColor.Color">
            <summary>
            Get/Set the <see cref="P:UIComponents.ExtendedColor.Color"/> value of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Red">
            <summary>
            Get/Set the Red component of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Green">
            <summary>
            Get/Set the Green component of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Blue">
            <summary>
            Get/Set the Blue component of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Alpha">
            <summary>
            Get/Set the Alpha component of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Hue">
            <summary>
            Get/Set the hue component of the <c>ExtendedColor</c>
            </summary>
            <remarks>
            This value is always specified using the normalized form (0.0 -> 1.0)
            </remarks>
        </member>
        <member name="P:UIComponents.ExtendedColor.HueNonNormalized">
            <summary>
            Get/Set the hue component of the <c>ExtendedColor</c> in its
            non-normalized form
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Saturation">
            <summary>
            Get/Set the saturation component of the <c>ExtendedColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.Luminance">
            <summary>
            Get/Set the luminance component of the <c>ExtendedColor</c>
            </summary>
            <remarks>
            Internally the .NET Framework refers to this value as Brightness
            (<see cref="M:System.Drawing.Color.GetBrightness"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.ExtendedColor.IsEmpty">
            <summary>
            <see langword="true"/> if the <c>ExtendedColor</c> is <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:UIComponents.ExtendedColor.IsTransparent">
            <summary>
            <see langword="true"/> if the <c>ExtendedColor</c> is <see cref="P:System.Drawing.Color.Transparent"/>
            </summary>
        </member>
        <member name="T:UIComponents.GradientColor">
            <summary>
            <c>GradientColor</c> describes the <c>start</c> and <c>end</c> <see cref="T:System.Drawing.Color"/> values for
            a gradient fill.
            </summary>
            <remarks>
            Like <see cref="T:UIComponents.ColorPair"/> this class extends <see cref="T:UIComponents.AbstractColorPair"/> and provides
            to overload properties <see cref="P:UIComponents.GradientColor.Start"/> and <see cref="P:UIComponents.GradientColor.End"/>.
            <para>
            This class uses a custom <see cref="T:System.Drawing.Design.UITypeEditor"/> and <see cref="T:System.ComponentModel.TypeConverter"/>. See
            <see cref="T:UIComponents.Designers.GradientColorEditor"/> and 
            <see cref="T:UIComponents.Designers.GradientColorConverter"/> respectively.
            The primary purpose of the <see cref="T:System.Drawing.Design.UITypeEditor"/> is to show a preview of the
            gradient in the designer property grid.
            </para>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.GradientColor.#ctor">
            <summary>
            Create a <c>GradientColor</c> with <see cref="P:UIComponents.GradientColor.Start"/> and <see cref="P:UIComponents.GradientColor.End"/>
            values equal to <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="M:UIComponents.GradientColor.#ctor(System.Drawing.Color)">
            <summary>
            Create a <c>GradientColor</c> with <see cref="P:UIComponents.GradientColor.Start"/> and <see cref="P:UIComponents.GradientColor.End"/>
            values equal to the specified <see cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="M:UIComponents.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create a <c>GradientColor</c> with <see cref="P:UIComponents.GradientColor.Start"/> and <see cref="P:UIComponents.GradientColor.End"/>
            values equal to the specified <see cref="T:System.Drawing.Color"/> values
            </summary>
        </member>
        <member name="M:UIComponents.GradientColor.#ctor(UIComponents.AbstractColorPair)">
            <summary>
            Create a <c>GradientColor</c> from an <see cref="T:UIComponents.AbstractColorPair"/>
            </summary>
            <remarks>
            See <see cref="M:UIComponents.AbstractColorPair.#ctor(UIComponents.BaseColorCollection)"/> for more information
            </remarks>
        </member>
        <member name="M:UIComponents.GradientColor.#ctor(UIComponents.BaseColorCollection)">
            <summary>
            Create a <c>GradientColor</c> from a <see cref="T:UIComponents.BaseColorCollection"/>
            </summary>
            <remarks>
            See <see cref="M:UIComponents.AbstractColorPair.#ctor(UIComponents.BaseColorCollection)"/> for more information
            </remarks>
        </member>
        <member name="M:UIComponents.GradientColor.Clone">
            <summary>
            Clone this <c>ColorPair</c>
            </summary>
            <returns>
            A clone of this <c>ColorPair</c>
            </returns>
        </member>
        <member name="M:UIComponents.GradientColor.GetBrush(System.Drawing.Rectangle,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            Return a LinearGradientBrush for this GradientColor using the specified
            <see cref="T:System.Drawing.Rectangle"/> and <see cref="T:System.Drawing.Drawing2D.LinearGradientMode"/>
            </summary>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/></param>
            <param name="mode">The mode of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/></param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.GradientColor.GetColorItemType">
            <summary>
            Override to provide our 'custom' enumeration for our color indices
            </summary>
            <returns>
            typeof(ColorPairType)
            </returns>
        </member>
        <member name="P:UIComponents.GradientColor.Start">
            <summary>
            Get/Set the start <see cref="T:System.Drawing.Color"/> value of the <c>GradientColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.GradientColor.End">
            <summary>
            Get/Set the end <see cref="T:System.Drawing.Color"/> value of the <c>GradientColor</c>
            </summary>
        </member>
        <member name="T:UIComponents.GradientColor.GradientColorType">
            <summary>
            Enumeration of <see cref="T:UIComponents.GradientColor"/> values
            </summary>
        </member>
        <member name="F:UIComponents.GradientColor.GradientColorType.GradientStart">
            <summary>
            Start color index of the gradient
            </summary>
        </member>
        <member name="F:UIComponents.GradientColor.GradientColorType.GradientEnd">
            <summary>
            End color index for the gradient
            </summary>
        </member>
        <member name="T:UIComponents.HSLColor">
            <summary>
            A simple HSL Color value
            </summary>
            <remarks>
            I wrote this class mostly as an exercise. I like to be able to manipulate colors in
            the HSL color-space and in some cases prefer the standard color dialog to the
            normal .NET color drop-down. Having said that, this class is not actually used
            by <see cref="T:UIComponents.XPPanel"/> or any other Control/Component in the name space.
            <para>
            This class includes an implicit <see cref="P:UIComponents.HSLColor.Color"/> conversion operator
            so that it can be used transparently with GDI+ code
            </para>
            <para>
            This class uses a custom <see cref="T:System.Drawing.Design.UITypeEditor"/> which pops the standard
            <see cref="T:System.Windows.Forms.ColorDialog"/>. It also includes a custom
            <see cref="T:System.ComponentModel.TypeConverter"/>. See <see cref="T:UIComponents.Designers.HSLColorEditor"/>
            and <see cref="T:UIComponents.Designers.HSLColorConverter"/> respectively.
            </para>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.HSLColor.hue">
            <summary>
            Normalized hue value (0.0 -> 1.0)
            </summary>
        </member>
        <member name="F:UIComponents.HSLColor.saturation">
            <summary>
            Normalized saturation value (0.0 -> 1.0)
            </summary>
        </member>
        <member name="F:UIComponents.HSLColor.luminance">
            <summary>
            Normalized luminance value (0.0 -> 1.0)
            </summary>
        </member>
        <member name="M:UIComponents.HSLColor.op_Implicit(UIComponents.HSLColor)~System.Drawing.Color">
            <summary>
            Implicitly (without casting) convert an <c>HSLColor</c> to its
            corresponding <see cref="P:UIComponents.HSLColor.Color"/> value. This makes the use
            of <c>HSLColor</c> transparent to GDI+ code
            </summary>
            <param name="hslColor">The <c>HSLColor to convert</c></param>
            <returns>
            The corresponding <see cref="P:UIComponents.HSLColor.Color"/> value
            </returns>
        </member>
        <member name="M:UIComponents.HSLColor.#ctor">
            <summary>
            Create a default <c>HSLColor</c> (black)
            </summary>
        </member>
        <member name="M:UIComponents.HSLColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a <c>HSLColor</c> from the specified HSL values
            </summary>
            <param name="hue">Normalized hue</param>
            <param name="saturation">Normalized saturation</param>
            <param name="luminance">Normalized saturation</param>
        </member>
        <member name="M:UIComponents.HSLColor.#ctor(System.Drawing.Color)">
            <summary>
            Create an <c>HSLColor</c> from the specified <see cref="P:UIComponents.HSLColor.Color"/>
            value
            </summary>
            <param name="color">The <see cref="P:UIComponents.HSLColor.Color"/></param>
        </member>
        <member name="M:UIComponents.HSLColor.#ctor(UIComponents.ExtendedColor)">
            <summary>
            Create an <c>HSLColor</c> from the specified <see cref="T:UIComponents.ExtendedColor"/>
            </summary>
            <param name="color">The <see cref="T:UIComponents.ExtendedColor"/></param>
        </member>
        <member name="M:UIComponents.HSLColor.Clone">
            <summary>
            Create a clone of this <c>HSLColor</c>
            </summary>
            <returns>
            A clone of this <c>HSLColor</c>
            </returns>
        </member>
        <member name="P:UIComponents.HSLColor.Hue">
            <summary>
            The normalized hue component of the <c>HSLColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.HSLColor.Saturation">
            <summary>
            The normalized saturation component of the <c>HSLColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.HSLColor.Luminance">
            <summary>
            The normalized luminance component of the <c>HSLColor</c>
            </summary>
        </member>
        <member name="P:UIComponents.HSLColor.Color">
            <summary>
            The <see cref="P:UIComponents.HSLColor.Color"/> value corresponding to the <c>HSLColor</c>
            </summary>
        </member>
        <member name="T:UIComponents.ImageCollection">
            <summary>
            <c>ImageCollection</c> provides a collection of <see cref="T:System.Drawing.Image"/> items with
            a canonical size and pixel format
            </summary>
            <remarks>
            The canonical <see cref="T:System.Drawing.Size"/> is defined via the <see cref="P:UIComponents.ImageCollection.Size"/>
            property, or the 1st <see cref="T:System.Drawing.Image"/> added to the collection. If the <see cref="P:UIComponents.ImageCollection.Size"/>
            property is changed <i>after</i> images are in the collection, all contained
            images are resized.
            <para>
            <c>ImageCollection</c> supports the <see cref="P:UIComponents.ImageCollection.TransparentColor"/> property to
            allow transparent images to be created based on a specific color (typically 
            <see cref="P:System.Drawing.Color.Magenta"/>). To add images that directly support alpha 
            transparency, or for no transparency, set the <see cref="P:UIComponents.ImageCollection.TransparentColor"/>
            property to <see cref="F:System.Drawing.Color.Empty"/>
            </para>
            <para>
            For this version of <c>ImageCollection</c> the pixel format is fixed
            at <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.ImageCollection.images">
            <summary>
            Collection used to store <see cref="T:System.Drawing.Image"/> items
            </summary>
        </member>
        <member name="F:UIComponents.ImageCollection.imageSize">
            <summary>
            Canonical size of <see cref="T:System.Drawing.Image"/> items
            </summary>
        </member>
        <member name="F:UIComponents.ImageCollection.transparentColor">
            <summary>
            <see cref="T:System.Drawing.Color"/> used as a mask to make images transparent
            </summary>
        </member>
        <member name="M:UIComponents.ImageCollection.op_Explicit(UIComponents.ImageCollection)~System.Windows.Forms.ImageList">
            <summary>
            Explicit operator (requires cast) to convert an <c>ImageCollection</c>
            to a <see cref="T:System.Windows.Forms.ImageList"/>
            </summary>
            <param name="imageCollection">The <c>ImageCollection</c> to convert</param>
            <returns>
            An <see cref="T:System.Windows.Forms.ImageList"/> representation of the
            <c>ImageCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor">
            <summary>
            Create an empty <c>ImageCollection</c>
            </summary>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor(System.Drawing.Size)">
            <summary>
            Create an empty <c>ImageCollection</c> with the specified
            canonical image size
            </summary>
            <param name="size">Canonical size for images</param>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor(System.Drawing.Color)">
            <summary>
            Create an empty <c>ImageCollection</c> with the 
            specified <see cref="T:System.Drawing.Color"/> value as a transparency
            mask
            </summary>
            <param name="transparentColor">Transparent color mask value</param>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor(System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Create an empty <c>ImageCollection</c> with the specified
            canonical image size and <see cref="T:System.Drawing.Color"/> value as a transparency
            mask
            </summary>
            <param name="size">Canonical size for images</param>
            <param name="transparentColor">Transparent color mask value</param>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Create an <c>ImageCollection</c> from a 'strip' of bitmap
            images
            </summary>
            <param name="images">The images for the <c>ImageCollection</c></param>
            <param name="imageCount">The number of images in the strip</param>
        </member>
        <member name="M:UIComponents.ImageCollection.#ctor(System.Drawing.Bitmap,System.Int32,System.Drawing.Color)">
            <summary>
            Create an <c>ImageCollection</c> from a 'strip' of bitmap
            images
            </summary>
            <param name="images">The images for the <c>ImageCollection</c></param>
            <param name="imageCount">The number of images in the strip</param>
            <param name="transparentColor">Transparent color mask value</param>
            <remarks>
            The width of the image strip must be an integral size of <c>imageCount</c>
            (i.e., <c>images.Width % imageCount == 0</c>)
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.ResizeImage(System.Drawing.Image)">
            <summary>
            Make sure the image conforms to the canonical size and transparency mask
             as defined by the <c>ImageCollection</c>
            </summary>
            <param name="image">The image</param>
            <returns>
            An <see cref="T:System.Drawing.Image"/> that conforms to the canonical size and
            transparent color mask for the <c>ImageCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.ImageCollection.AddImage(System.Drawing.Image)">
            <summary>
            Internal routine for adding an <see cref="T:System.Drawing.Image"/> to the
            <c>ImageCollection</c>
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to add</param>
            <returns>
            The index where the <see cref="T:System.Drawing.Image"/> was added to the
            <c>ImageCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.ImageCollection.Add(System.Drawing.Icon)">
            <summary>
            Add an Icon to the <c>ImageCollection</c>
            </summary>
            <param name="icon">The <see cref="T:System.Drawing.Icon"/> add</param>
            <returns>
            The index where the <see cref="T:System.Drawing.Icon"/> was added to the
            <c>ImageCollection</c>
            </returns>
            <remarks>
            The <see cref="T:System.Drawing.Icon"/> must be converted to a <see cref="T:System.Drawing.Bitmap"/>
            prior to being inserted. The <see cref="T:System.Drawing.Icon"/> defines its own
            transparency mask so our transparency color mask is irrelavent
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Add(System.Drawing.Image)">
            <summary>
            Add an <see cref="T:System.Drawing.Image"/> to the <c>ImageCollection</c>
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to add</param>
            <returns>
            The index where the <see cref="T:System.Drawing.Image"/> was added to the
            <c>ImageCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.ImageCollection.AddRange(System.Drawing.Image[])">
            <summary>
            Add an array of <see cref="T:System.Drawing.Image"/> items to the <c>ImageCollection</c>
            </summary>
            <param name="images">The images to add</param>
        </member>
        <member name="M:UIComponents.ImageCollection.Insert(System.Int32,System.Drawing.Image)">
            <summary>
            Insert an image at the specified point of the <c>ItemCollection</c>
            </summary>
            <param name="index">The insertion index</param>
            <param name="image">The <see cref="T:System.Drawing.Image"/></param>
        </member>
        <member name="M:UIComponents.ImageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swap the position of two images
            </summary>
            <param name="index1">Index of the 1st image</param>
            <param name="index2">Index of the 2nd image</param>
        </member>
        <member name="M:UIComponents.ImageCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the members of the <c>ImageCollection</c> to the specified
            <see cref="T:System.Array"/>  starting at the specified index
            </summary>
            <remarks>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.GetEnumerator">
            <summary>
            Get an <see cref="T:System.Collections.IEnumerator"/> for the items in the <c>ImageCollection</c>
            </summary>
            <remarks>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the <see cref="T:System.Drawing.Image"/> at the specified index
            </summary>
            <param name="index">The index of the <see cref="T:System.Drawing.Image"/></param>
            <remarks>
            <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a value at the specified index
            </summary>
            <param name="index">The insertion index</param>
            <param name="value">The value to insert</param>
            <remarks>
            <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Remove(System.Object)">
            <summary>
            Remove the specified value from the <c>ImageCollection</c>
            </summary>
            <param name="value">The value to removed</param>
            <remarks>
            <see cref="M:System.Collections.IList.Remove(System.Object)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Contains(System.Object)">
            <summary>
            Determine if the <c>ImageCollection</c> contains
            the specified value
            </summary>
            <param name="value">A value to search for</param>
            <returns>
            <see langword="true"/> if the <c>ImageCollection</c> contains
            the specified value, <see langword="false"/> otherwise
            </returns>
            <remarks>
            <see cref="M:System.Collections.IList.Contains(System.Object)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Clear">
            <summary>
            Clear all images from the <c>ImageCollection</c>
            </summary>
            <remarks>
            <see cref="M:System.Collections.IList.Clear"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.IndexOf(System.Object)">
            <summary>
            Determine the index of the specified value
            </summary>
            <param name="value">A value to search for</param>
            <returns>
            The index of the value, or -1 if the value is not
            a membe of the <c>ImageCollection</c>
            </returns>
            <remarks>
            <see cref="M:System.Collections.IList.IndexOf(System.Object)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImageCollection.Add(System.Object)">
            <summary>
            Add a value to the <c>ImageCollection</c>
            </summary>
            <param name="value">The value to add</param>
            <remarks>
            <see cref="M:System.Collections.IList.IndexOf(System.Object)"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.Images">
            <summary>
            Returns an image 'strip' containing all the images in the collection
            </summary>
            <remarks>
            The images are provided as a <see cref="T:System.Drawing.Bitmap"/> using a single row of <see cref="P:UIComponents.ImageCollection.Count"/> images
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.Item(System.Int32)">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Image"/> at the specified index in the
            collection
            </summary>
        </member>
        <member name="P:UIComponents.ImageCollection.Size">
            <summary>
            Get/Set the canonical image size for images in the <c>ImageCollection</c>
            </summary>
            <remarks>
            If required, each image in the collection is re-drawn at the new size
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.TransparentColor">
            <summary>
            Get/Set the transparent color make value
            </summary>
            <remarks>
            If necessary, the transparency mask value for each <see cref="T:System.Drawing.Image"/> is
            set to the new value
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.ImageList">
            <summary>
            Create an <see cref="T:System.Windows.Forms.ImageList"/> from images
            in the collection
            </summary>
        </member>
        <member name="P:UIComponents.ImageCollection.IsSynchronized">
            <summary>
            Determine if the <c>ImageCollection</c> is synchronized
            </summary>
            <remarks>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.Count">
            <summary>
            Get the number of <see cref="T:System.Drawing.Image"/> items in the <c>ImageCollection</c>
            </summary>
            <remarks>
            See <see cref="P:System.Collections.ICollection.Count"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.SyncRoot">
            <summary>
            Get the synhronization root of the <c>ImageCollection</c>
            </summary>
            <remarks>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.IsReadOnly">
            <summary>
            Determine if the <c>ImageCollection</c> is read-only
            </summary>
        </member>
        <member name="P:UIComponents.ImageCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Internal implementation for adding an image to
            the <c>ImageCollection</c>
            </summary>
            <remarks>
            Called by any code that casts the <c>ImageCollection</c> to
            an <see cref="T:System.Collections.IList"/>. This is how the <see cref="T:System.ComponentModel.Design.CollectionEditor"/>
            works...
            </remarks>
            <remarks>
            <see cref="P:System.Collections.IList.Item(System.Int32)"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageCollection.IsFixedSize">
            <summary>
            Determine if the <c>ImageCollection</c> is a fixed size
            </summary>
            <remarks>
            <see cref="P:System.Collections.IList.IsFixedSize"/>
            </remarks>
        </member>
        <member name="T:UIComponents.Designers.ImageCollectionEditor">
            <summary>
            Simple <see cref="T:System.Drawing.Design.UITypeEditor"/> which forwards to the standard <see cref="T:System.ComponentModel.Design.CollectionEditor"/>
            for <see cref="T:System.Drawing.Image"/> types
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ImageCollectionEditor.#ctor">
            <summary>
            Create an <c>ImageCollectionEditor</c>
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ImageCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Forward to base class implementation
            </summary>
            <param name="context">designer context</param>
            <param name="provider">designer service provider</param>
            <param name="value">value to be edited</param>
            <returns>
            The edited value
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Forward to the normal <see cref="T:System.Drawing.Image"/> editor
            </summary>
            <param name="ItemType">ignored</param>
            <returns>
            A new <see cref="T:System.Drawing.Image"/>
            </returns>
        </member>
        <member name="T:UIComponents.ImageItemCollection">
            <summary>
            ImageItemCollection represents an arbitrary number of image index
            mappings
            </summary>
            <remarks>
            Although we provide an implementation of <see cref="T:System.Collections.ICollection"/> we are not
            defined as doing so because it causes confusion with the designer.
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.ImageItemCollection.Undefined">
            <summary>
            Represents an undefined mapping (i.e., no mapping)
            </summary>
        </member>
        <member name="F:UIComponents.ImageItemCollection.imageSet">
            <summary>
            The associated <see cref="P:UIComponents.ImageItemCollection.ImageSet"/> that has the images being mapped
            </summary>
        </member>
        <member name="F:UIComponents.ImageItemCollection.imageMap">
            <summary>
            array that holds the image index mappings
            </summary>
        </member>
        <member name="F:UIComponents.ImageItemCollection.propertyChangeListeners">
            <summary>
            <see cref="E:UIComponents.ImageItemCollection.PropertyChange"/> event listeners
            </summary>
        </member>
        <member name="M:UIComponents.ImageItemCollection.#ctor(System.Int32)">
            <summary>
            Create an <c>ImageItemCollection</c> that holds the specified number
            of image mappings
            </summary>
            <param name="numImages">The number of image index mappings</param>
            <exception cref="T:System.ArgumentException">If <c>numImages</c> &lt;= 0</exception>
        </member>
        <member name="M:UIComponents.ImageItemCollection.IsDefined(System.Int32)">
            <summary>
            Determine if the specified image index has a defined mapping
            </summary>
            <param name="index">The image index</param>
            <returns>
            <see langword="true"/> if the image index has a defined mapping
            </returns>
        </member>
        <member name="M:UIComponents.ImageItemCollection.IsImage(System.Int32)">
            <summary>
            Determine if the specified image index is both defined and referencs
            a valid image
            </summary>
            <param name="index">The image index</param>
            <returns>
            <see langword="true"/> if the image index has a defined mapping and a valid
            image in the <see cref="P:UIComponents.ImageItemCollection.ImageSet"/>
            </returns>
        </member>
        <member name="M:UIComponents.ImageItemCollection.Image(System.Int32)">
            <summary>
            Get the <see cref="M:UIComponents.ImageItemCollection.Image(System.Int32)"/> mapped for the specified image index
            </summary>
            <param name="index">The image index</param>
            <returns>
            The <see cref="M:UIComponents.ImageItemCollection.Image(System.Int32)"/> mapped for the specified image index, or <see langword="null"/>
            if the image index mapping is undefined or the specified image does not exist
            </returns>
        </member>
        <member name="M:UIComponents.ImageItemCollection.Equals(System.Object)">
            <summary>
            Compare this <c>ImageItemCollection</c> to another for equality
            </summary>
            <param name="obj">The other <c>ImageItemCollection</c> to compare</param>
            <returns>
            <see langword="true"/> if the two instances have the same definition, 
            <see langword="false"/> otherwise
            </returns>
        </member>
        <member name="M:UIComponents.ImageItemCollection.GetHashCode">
            <summary>
            Overridden to avoid warning when overriding <see cref="M:UIComponents.ImageItemCollection.Equals(System.Object)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIComponents.ImageItemCollection.OnPropertyChange(System.Int32)">
            <summary>
            Internal routine to trigger the <see cref="E:UIComponents.ImageItemCollection.PropertyChange"/>
            event to listeners
            </summary>
            <param name="index">The index that changed or <see cref="F:UIComponents.ImageItemCollection.Undefined"/>
            if the <see cref="P:UIComponents.ImageItemCollection.ImageSet"/> changed</param>
        </member>
        <member name="M:UIComponents.ImageItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
        </member>
        <member name="M:UIComponents.ImageItemCollection.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.Item(System.Int32)">
            <summary>
            Get/Set an image index mapping
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">If the index is invalid</exception>
        </member>
        <member name="P:UIComponents.ImageItemCollection.ImageSet">
            <summary>
            Get/Set the associated <see cref="P:UIComponents.ImageItemCollection.ImageSet"/>
            </summary>
            <remarks>
            When the <see cref="P:UIComponents.ImageItemCollection.ImageSet"/> changes we send a property change
            event with a index value of <see cref="F:UIComponents.ImageItemCollection.Undefined"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ImageItemCollection.IsEmpty">
            <summary>
            Determine if all the image index mappings are undefined
            </summary>
        </member>
        <member name="E:UIComponents.ImageItemCollection.PropertyChange">
            <summary>
            Add/Remove <c>PropertyChange</c> listeners
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.IsSynchronized">
            <summary>
            <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.Count">
            <summary>
            <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.SyncRoot">
            <summary>
            <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="T:UIComponents.ImageItemCollection.PropertyChangeEventArgs">
            <summary>
            <see cref="E:UIComponents.ImageItemCollection.PropertyChange"/> event 
            arguments
            </summary>
        </member>
        <member name="F:UIComponents.ImageItemCollection.PropertyChangeEventArgs.indexChanged">
            <summary>
            The image index mapping that changed
            </summary>
        </member>
        <member name="M:UIComponents.ImageItemCollection.PropertyChangeEventArgs.#ctor(System.Int32)">
            <summary>
            Create a <c>PropertyChangeEventArgs</c>
            </summary>
            <param name="index">The index that changed or -1 if the associated
            <see cref="P:UIComponents.ImageItemCollection.ImageSet"/> changed</param>
        </member>
        <member name="P:UIComponents.ImageItemCollection.PropertyChangeEventArgs.Index">
            <summary>
            Get the image index mapping that changed
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.PropertyChangeEventArgs.IsImageIndex">
            <summary>
            Determine if the PropertyChange represents and image index
            mapping (as opposed to the associated <see cref="P:UIComponents.ImageItemCollection.ImageSet"/>)
            </summary>
        </member>
        <member name="P:UIComponents.ImageItemCollection.PropertyChangeEventArgs.IsImageSet">
            <summary>
            Determine if the PropertyChange represents a change to
            the associated <see cref="P:UIComponents.ImageItemCollection.ImageSet"/>
            </summary>
        </member>
        <member name="T:UIComponents.Designers.ImageMapEditor">
            <summary>
            ImageMapEditor provides a drop-down pop-up of all images in the
            associated <see cref="T:UIComponents.ImageSet"/>
            </summary>
        </member>
        <member name="F:UIComponents.Designers.ImageMapEditor.wfes">
            <summary>
            Service used to provide the image popup
            </summary>
        </member>
        <member name="F:UIComponents.Designers.ImageMapEditor.selectedIndex">
            <summary>
            Image selected from the popup (-1 is cancel)
            </summary>
        </member>
        <member name="F:UIComponents.Designers.ImageMapEditor.imagePanel">
            <summary>
            Instance of <see cref="T:UIComponents.ImagePanel"/> for the drop-down pop-up
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.#ctor">
            <summary>
            Create an <c>ImageMapEditor</c>
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Tell the designer we use the <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/>
            style
            </summary>
            <param name="context">designer context</param>
            <returns>
            <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/> if the context and instance
            are valid, otherwise whatever the base class says
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.GetImageSet(System.Object)">
            <summary>
            Extract the <see cref="T:UIComponents.ImageSet"/> associated with the instance
            being edited
            </summary>
            <param name="component">The item being edited</param>
            <returns>
            The edited items associated <see cref="T:UIComponents.ImageSet"/> or 
            <see langword="null"/> if it cant be found or is 
            undefined
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Yes we paint values
            </summary>
            <param name="context">designer context</param>
            <returns>
            <see langword="true"/>
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paint a preview of the <see cref="T:System.Drawing.Image"/> specified by
            the image index provided by the <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>
            </summary>
            <param name="pe">The PaintValue event args</param>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            When editing an image index value, let the user choose an image from
            a popup that displays all the images in the associated <see cref="T:UIComponents.ImageSet"/>
            </summary>
            <param name="context">designer context</param>
            <param name="provider">designer service provider</param>
            <param name="value">image index item</param>
            <returns>
            An image index (selected from the popup) or -1 if the user canceled the
            selection
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageMapEditor.imagePanel_ImageSelected(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:UIComponents.ImagePanel.ImageSelected"/> listener
            </summary>
            <param name="sender">The <see cref="T:UIComponents.ImagePanel"/></param>
            <param name="e"><see cref="T:UIComponents.ImageSelectedEventArgs"/> specifying the selection (or -1)</param>
        </member>
        <member name="T:UIComponents.ImagePanel">
            <summary>
            ImagePanel Control displays a set of source images allowing the
            user to select an image using the mouse or keyboard
            </summary>
            <remarks>
            The <c>ImagePanel</c> can be run in two different modes:
            <list type="bullet">
            <item>Static Control</item>
            <item>Popup (like a context menu)</item>
            </list>
            <para>
            Overall functionality is the same but when in popup mode, various actions/events
            cause the <c>ImagePanel</c> to be hidden
            </para>
            <para>
            <c>ImagePanel</c> has the following primary properties:
            <list type="table">
            	<listheader>
            		<term>Property</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.Dimensions"/></term>
            		<description>Determines the row/column arrangement for the image grid</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.HighlightColor"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.SelectedColor"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.GridColor"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.PanelGridSize"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.AutoSelect"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.ImagePanel.Images"/></term>
            		<description></description>
            	</item>
            </list>
            </para>
            <para>
            <c>ImagePanel</c> has the following primary events:
            <list type="table">
            	<listheader>
            		<term>Event</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="E:UIComponents.ImagePanel.PropertyChange"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="E:UIComponents.ImagePanel.ImageSelected"/></term>
            		<description></description>
            	</item>
            </list>
            </para>
            <para>
            <c>ImagePanel</c> has the following primary methods:
            <list type="table">
            	<listheader>
            		<term>Method</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="M:UIComponents.ImagePanel.SetImages(System.Drawing.Bitmap,System.Int32)"/></term>
            		<description></description>
            	</item>
            	<item>
            		<term><see cref="M:UIComponents.ImagePanel.Popup(System.Int32,System.Int32,System.Windows.Forms.Control)"/></term>
            		<description></description>
            	</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.MsgWaitForMultipleObjects(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Win32 function that allows us to 'sleep' if there are no application level
            events to be fired. This way we dont take up all the CPU cycles while
            in a tight loop during popup.
            </summary>
            <param name="nCount">The number of wait handles</param>
            <param name="pHandles">The array of wait handles</param>
            <param name="bWaitAll">Wait option</param>
            <param name="dwMilliseconds">Wait timeout</param>
            <param name="dwWakeMask">Event types mask</param>
            <returns>
            Various values. Primarily the wait handle that signaled, but could
            indicate timeout or abandonment. See Win32 API docs for complete
            info.
            </returns>
        </member>
        <member name="F:UIComponents.ImagePanel.components">
            <summary>
            Standard Container Control collection
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.sourceImages">
            <summary>
            Source image strip
            </summary>
            <remarks>
            Contains <c>imageCount</c> images
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.imageCount">
            <summary>
            Number of images in the sourceImage bitmap
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.imageSize">
            <summary>
            Size of source images
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.gridSize">
            <summary>
            Size of the grid
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.panelImage">
            <summary>
            Pre-drawn, internal representation of grid w/ images
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.dimensions">
            <summary>
            Dimensions of columns and rows
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.imageUnits">
            <summary>
            Combination of imageSize and gridSize values
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.isAutoSelect">
            <summary>
            True if mouse hover automatically selects an image
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.selectedColors">
            <summary>
            Frame/Background color for selected image
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.gridColor">
            <summary>
            Color of the image grid
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.defaultImage">
            <summary>
            The default image to be selected
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.baseBounceFactorAdjust">
            <summary>
            Base increment for bouncing
            </summary>
            <remarks>
            See <see cref="P:UIComponents.ImagePanel.BounceFactor"/> 
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.maxBounceRatio">
            <summary>
            Maximum image bounce size (120% of org. image)
            </summary>
            <remarks>
            See <see cref="P:UIComponents.ImagePanel.MaxBounceRatio"/> 
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.minBounceRatio">
            <summary>
            Minimum image bounce size (80% of org. image)
            </summary>
            <remarks>
            See <see cref="P:UIComponents.ImagePanel.MinBounceRatio"/> 
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.bounceFactor">
            <summary>
            Dynamic bounce factor. Moves between min and max
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.bounceFactorAdjust">
            <summary>
            Dynamic bounce factor. Goes +/- depending on shrinking/growing
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.propertyChangeListeners">
            <summary>
            Listeners for property change events
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.imageSelectedListeners">
            <summary>
            Event handler triggered when an image is selected
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.focusControl">
            <summary>
            Control to receive focus when a popup completes
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.isPopup">
            <summary>
            True if the image panel is being shown as a popup
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.virtualRows">
            <summary>
            When columns are fixed, represents the "actual" number of rows in the
            bitmap representation of the image panel (although Rows # of rows are visible)
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.selectedColumn">
            <summary>
            Last column selected
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.selectedRow">
            <summary>
            Last row selected
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.isMouseDown">
            <summary>
            True if the mouse is down
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.isMouseHover">
            <summary>
            True if the mouse is hovering
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.#ctor">
            <summary>
            Create an empty <c>ImagePanel</c>
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an <c>ImagePanel</c> with the specified sourc image
            and grid dimensions
            </summary>
            <param name="sourceImages">The source image strip</param>
            <param name="imageCount">The number of images in the strip</param>
            <param name="rows">Number of rows in the grid</param>
            <param name="columns">Number of columns in the grid</param>
        </member>
        <member name="M:UIComponents.ImagePanel.#ctor(UIComponents.ImageSet)">
            <summary>
            Create an ImagePanel using the specified <see cref="T:UIComponents.ImageSet"/> for the
            source images
            </summary>
            <param name="imageSet">Source images</param>
            <remarks>
            The best dimensions (rows/cols) are calculated using <see cref="F:UIComponents.ImagePanel.PanelSizeHints.MinimizeBoth"/>
            which produces the best square. The client rectangle for the <c>ImagePanel</c> is calculated based
            upon the dimensions
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.ShouldSerializePanelGridSize">
            <summary>
            Determine if this property should be serialized by designer
            code generation
            </summary>
            <returns>
            <see langword="true"/> if the property does not equal its default value
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.ResetPanelGridSize">
            <summary>
            Reset this property to its default value
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.ShouldSerializeDimensions">
            <summary>
            Determine if this property should be serialized by designer
            code generation
            </summary>
            <returns>
            <see langword="true"/> if the property does not equal its default value
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.ResetDimensions">
            <summary>
            Reset this property to its default value
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.SetImages(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Set the source images for the <c>ImagePanel</c>
            </summary>
            <param name="images">The source image strip</param>
            <param name="imageCount">The number of images in the image strip</param>
            <remarks>
            <para>This method fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.ImagesProperty"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.SetImages(UIComponents.ImageSet)">
            <summary>
            Initializes the source images from the specified <see cref="T:UIComponents.ImageSet"/>
            </summary>
            <param name="imageSet">The source image collection</param>
            <remarks>
            <para>This method (indirectly) fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.ImagesProperty"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.SetImages(System.Windows.Forms.ImageList)">
            <summary>
            Initializes the source images from the specified <see cref="T:System.Windows.Forms.ImageList"/>
            </summary>
            <param name="imageList">The source image list</param>
            <remarks>
            <para>This method (indirectly) fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.ImagesProperty"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.Popup(System.Int32,System.Int32,UIComponents.ImagePanel.ImagePanelPlacement,System.Windows.Forms.Control)">
            <summary>
            Show the <c>ImagePanel</c> as a popup with its origin
            at the specified X,Y coordinates (relative to its parent)
            </summary>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="placement">Specifies relative meaning of X/Y coordinates</param>
            <param name="focusMe">Control to receive the focus when the
            popup is complete (or <see langword="null"/>)</param>
            <returns>
            The image index selected, or -1 if canceled
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.Popup(System.Int32,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Show the <c>ImagePanel</c> as a popup with its origin
            at the specified X,Y coordinates (relative to its parent)
            </summary>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="focusMe">Control to receive the focus when the
            popup is complete (or <see langword="null"/>)</param>
            <returns>
            The image index selected, or -1 if canceled
            </returns>
            <remarks>
            X/Y coordinates are <see cref="F:UIComponents.ImagePanel.ImagePanelPlacement.TopLeft"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.Popup(System.Int32,System.Int32,UIComponents.ImagePanel.ImagePanelPlacement,System.Windows.Forms.Control,UIComponents.ImagePanel.PanelSizeHints)">
            <summary>
            Show the <c>ImagePanel</c> as a popup with its origin
            at the specified X,Y coordinates (relative to its parent)
            with dimensions suggested by the <see cref="T:UIComponents.ImagePanel.PanelSizeHints"/>
            </summary>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="placement">Relative meaning of X/Y coordinates</param>
            <param name="panelSizeHint">Hint about panel layout</param>
            <param name="focusMe">Control to receive the focus when the
            popup is complete (or <see langword="null"/>)</param>
            <returns>
            The image index selected, or -1 if canceled
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.Popup(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Show the <c>ImagePanel</c> as a popup using the specified
            client <see cref="T:System.Drawing.Rectangle"/> (relative to its parent)
            </summary>
            <param name="rect">The client rectangle for the pop-up</param>
            <param name="focusMe">Control to receive the focus when the
            popup is complete (or <see langword="null"/>)</param>
            <returns>
            The image index selected, or -1 if canceled
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.ClearSelection">
            <summary>
            Clear any selection
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.EnsureVisible(System.Int32,System.Int32)">
            <summary>
            Ensure that a given row/column coordinate is fully visible
            by scrolling as necessary
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
        </member>
        <member name="M:UIComponents.ImagePanel.SetSelection(System.Int32,System.Int32)">
            <summary>
            Set the row/column of the selected image
            </summary>
            <param name="row">The row index (or -1)</param>
            <param name="column">The column index (or -1)</param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnPropertyChange(UIComponents.ImagePanel.ImagePanelProperties)">
            <summary>
            React to property changes, including firing <see cref="E:UIComponents.ImagePanel.PropertyChange"/> events
            </summary>
            <param name="imagePanelProperty">Enumeration for the property that changed</param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnImageSelectedEvent(System.Int32)">
            <summary>
            Fire an <see cref="E:UIComponents.ImagePanel.ImageSelected"/> event
            </summary>
            <param name="imageIndex">The image index selected or (-1 for cancel)</param>
        </member>
        <member name="M:UIComponents.ImagePanel.CalculateBestDimensions(System.Int32,UIComponents.ImagePanel.PanelSizeHints)">
            <summary>
            Given the <see cref="T:UIComponents.ImagePanel.PanelSizeHints"/>, calculate the best dimensions
            for a given number of images
            </summary>
            <param name="imageCount">Number of images</param>
            <param name="sizeHints">hints about the layout</param>
            <returns>
            The suggested Width (cols) and Height (rows) of the panel as type
             <see cref="T:System.Drawing.Size"/>
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.CalculateBestDimensions(System.Drawing.Rectangle)">
            <summary>
            Given a rectangle, calculate the best dimensions for the <c>ImagePanel</c>
            </summary>
            <param name="rect">The bounding rectangle</param>
            <returns>
            The suggested Width (cols) and Height (rows) of the panel as type
             <see cref="T:System.Drawing.Size"/>
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.CalculateBestClientSize">
            <summary>
            Calculate the best <see cref="T:System.Drawing.Rectangle"/> given the current
            row/column configuration
            </summary>
            <returns>
            A suggested client rectangle
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.GetPanelImageRect(System.Int32,System.Int32)">
            <summary>
            Returns the image <see cref="T:System.Drawing.Rectangle"/> for a given row/column
            excluding the frame
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <returns>
            The rectangle for a given row/column (does not include frame of image)
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.GetPanelFrameRect(System.Int32,System.Int32)">
            <summary>
            Returns the image <see cref="T:System.Drawing.Rectangle"/> for a given row/column
            including the frame
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <returns>
            The rectangle for a given row/column including the frame
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.GetSourceImageRect(System.Int32,System.Int32)">
            <summary>
            Returns the image <see cref="T:System.Drawing.Rectangle"/> for a given row/column
            in the source image
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <returns>
            The rectangle for the image that corresponds to the row/column
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.GetImageIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of the image for the specified row/column
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <returns>
            The image index for the specified row/column or -1 if
            the coordinates do specify valid coordinates
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.IsImage(System.Int32,System.Int32)">
            <summary>
            Determine if the given row/column coordinates contains
            an image
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <returns>
            <see langword="true"/> if the coordinates contain an image
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.CreateBitmap(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the cached <see cref="T:System.Drawing.Bitmap"/> representation of the
            <c>ImagePanel</c>
            </summary>
            <param name="sourceImages">The source images 'strip'</param>
            <param name="imageCount">The number of source images</param>
            <param name="rows">The number of rows in the panel grid</param>
            <param name="columns">The number of cols in the panel grid</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> representation of the <c>ImagePanel</c>
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.OnPopup">
            <summary>
            Hook for sub-classes. Called when popping up
            </summary>
            <remarks>
            <seealso cref="M:UIComponents.ImagePanel.DoPopup(System.Drawing.Rectangle,System.Windows.Forms.Control)"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.DoPopup(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Popup the <c>ImagePanel</c>
            </summary>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> for the popup</param>
            <param name="focusMe">The control to receive focus when the popup completes</param>
            <returns>
            The index of the image selected, or -1 if canceled
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.DoPopup(System.Int32,System.Int32,UIComponents.ImagePanel.ImagePanelPlacement,System.Windows.Forms.Control)">
            <summary>
            Popup the <c>ImagePanel</c> at the specified coordinates
            </summary>
            <param name="x">The X origin</param>
            <param name="y">The Y origin</param>
            <param name="placement">Specifies meaning of X/Y coordinates</param>
            <param name="focusMe">The control to receive focus when the popup completes</param>
            <returns>
            The index of the image selected, or -1 if canceled
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.ResetPopup">
            <summary>
            Reset the <c>ImagePanel</c> in preperation for Popup
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.OnBackColorChanged(System.EventArgs)">
            <summary>
            Override to forward to our <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.ImagePanel.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Handle keyboard navigation
            </summary>
            <param name="msg">The <see cref="T:System.Windows.Forms.Message"/></param>
            <param name="keyData">The <see cref="T:System.Windows.Forms.Keys"/> data</param>
            <returns>
            <see langword="true"/> if the message was processed, <see langword="false"/> otherwise
            </returns>
        </member>
        <member name="M:UIComponents.ImagePanel.OnVisibleChanged(System.EventArgs)">
            <summary>
            Handle various conditions when the <c>ImagePanel</c>
            is shown/hidden
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnLostFocus(System.EventArgs)">
            <summary>
            React to losing the focus
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse down
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseHover(System.EventArgs)">
            <summary>
            Handle mouse hover for highlight and auto-select
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse up 
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
            <remarks>
            MouseUp triggers <see cref="E:UIComponents.ImagePanel.ImageSelected"/> event if the
            mouse down was on a valid image
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse movement for image selection 
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseEnter(System.EventArgs)">
            <summary>
            Grab focus on mouse enter
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:UIComponents.ImagePanel.OnMouseLeave(System.EventArgs)">
            <summary>
            Clear selection when mouse leaves
            </summary>
            <param name="e"></param>
            <remarks>
            Note that we don't hide if in popup mode when the mouse leaves
            </remarks>
        </member>
        <member name="M:UIComponents.ImagePanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the <c>ImagePanel</c>
            </summary>
            <param name="pevent"><see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="P:UIComponents.ImagePanel.SelectedColors">
            <summary>
            Get/Set the <see cref="T:UIComponents.ColorPair"/> which describes the Frame and
            Background <see cref="T:System.Drawing.Color"/> values for selected images
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.HighlightColor">
            <summary>
            Get/Set the image highlight background color used when an
            image is pre-selected (mouse over, keyboard) and the frame color
            when selected (mouse down, mouse hover)
            </summary>
            <remarks>
            The <c>HighightColor</c> is used for both the frame of the image as
            well as the background color. The background color is only visible
            when if the image has transparency and the background color of 
            the image panel is not equivalent. The background/frame color
            used is always determined in conjunction with <see cref="P:UIComponents.ImagePanel.SelectedColor"/>
            so that the frame/background colors alternates. (i.e, whats the point
            of a frame that is the same color as the background?)
            <para>
            This property (indirectly) sends a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with 
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.SelectedColorsProperty"/> 
            </para>
            <para>
            <seealso cref="P:UIComponents.ImagePanel.SelectedColor"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.SelectedColor">
            <summary>
            Get/Set the image selected frame/background color used when an
            image is selected (mouse down, mouse hover)
            </summary>
            <remarks>
            The <c>SelectedColor</c> is used for both the frame of the image as
            well as the background color. The background color is only visible
            when if the image has transparency and the background color of 
            the image panel is not equivalent. The background/frame color
            used is always determined in conjunction with <see cref="P:UIComponents.ImagePanel.HighlightColor"/>
            so that the frame/background colors alternates. (i.e, whats the point
            of a frame that is the same color as the background?)
            <para>
            This property (indirectly) sends a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with 
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.SelectedColorsProperty"/> 
            </para>
            <para>
            <seealso cref="P:UIComponents.ImagePanel.HighlightColor"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.GridColor">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Color"/> value of the grid lines
            </summary>
            <para>
            This property sends a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with 
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.GridColorProperty"/> 
            </para>
        </member>
        <member name="P:UIComponents.ImagePanel.PanelGridSize">
            <summary>
            Get/Set the line thickness of the <c>ImagePanel</c> grid
            </summary>
            <remarks>
            <para>This method fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.PanelGridSizeProperty"/></para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.Dimensions">
            <summary>
            Get/Set the dimensions of the <c>ImagePanel</c> grid
            </summary>
            <remarks>
            The ImagePanel grid is define in terms of rows/columns where 
            <see cref="P:System.Drawing.Size.Width"/> is the number of columns, and
            <see cref="P:System.Drawing.Size.Height"/> is the number of rows
            <para>This method fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.DimensionsProperty"/></para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.AutoSelect">
            <summary>
            Get/Set automatic selection of image on mouse hover
            </summary>
            <remarks>
            <para>This method fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.AutoSelectProperty"/></para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.Images">
            <summary>
            Get the <see cref="T:System.Drawing.Bitmap"/> for the source images
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.DefaultImage">
            <summary>
            Get/Set the default image selection
            </summary>
            <remarks>
            <para>This method fires a <see cref="E:UIComponents.ImagePanel.PropertyChange"/> event with the
            <see cref="F:UIComponents.ImagePanel.ImagePanelProperties.DefaultImageProperty"/></para>
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.BounceFactor">
            <summary>
            Get/Set the increment/decrement unit when bouncing an image
            </summary>
            <remarks>
            <c>BounceFactor</c> must be between 0.0 and 1.0 inclusive
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.MaxBounceRatio">
            <summary>
            Get/Set the maximum image scaling during bouncing
            </summary>
            <remarks>
            <c>MaxBounceRatio</c> must be &gt;= 1.0
            </remarks>
        </member>
        <member name="P:UIComponents.ImagePanel.MinBounceRatio">
            <summary>
            Get/Set the minimum image scaling during bouncing
            </summary>
            <remarks>
            <c>MinBounceRatio</c> must be &lt;= 1.0
            </remarks>
        </member>
        <member name="E:UIComponents.ImagePanel.PropertyChange">
            <summary>
            Add/Remove <c>PropertyChange</c> event listeners
            </summary>
        </member>
        <member name="E:UIComponents.ImagePanel.ImageSelected">
            <summary>
            Add/Remove <c>ImageSelected</c> event listeners
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.Rows">
            <summary>
            Get the number of rows in the <c>ImagePanel</c>
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.Columns">
            <summary>
            Get the number of columns in the <c>ImagePanel</c>
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.PanelImage">
            <summary>
            Get the cached <c>ImagePanel</c> <see cref="T:System.Drawing.Bitmap"/>, creating
            it if necessary
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.SelectedRow">
            <summary>
            Get/Set the selected row coordinate
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.SelectedColumn">
            <summary>
            Get/Set the selected column coordinate
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.HasSelection">
            <summary>
            Determine if the <c>ImagePanel</c> has a selected image
            </summary>
        </member>
        <member name="P:UIComponents.ImagePanel.AutoScroll">
            <summary>
            Override to supress in designer property grid
            </summary>
            <remarks>
            We always want this value to be <see langword="true"/>
            </remarks>
        </member>
        <member name="T:UIComponents.ImagePanel.PanelSizeHints">
            <summary>
            Enumeration providing hint on how <see cref="T:UIComponents.ImagePanel"/> layout
            should appear
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.PanelSizeHints.MinimizeColumns">
            <summary>
            Minimize the number of columns
            </summary>
            <remarks>
            <c>ImagePanel</c> will be vertically oriented
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.PanelSizeHints.MinimizeRows">
            <summary>
            Minimize the number of rows
            </summary>
            <remarks>
            <c>ImagePanel</c> will be horizontally oriented
            </remarks>
        </member>
        <member name="F:UIComponents.ImagePanel.PanelSizeHints.MinimizeBoth">
            <summary>
            Minimize both the number of rows and columns
            </summary>
            <remarks>
            <c>ImagePanel</c> will be a square
            </remarks>
        </member>
        <member name="T:UIComponents.ImagePanel.ImagePanelPlacement">
            <summary>
            Enumeration used to define X/Y coordinates
            for Popup mode
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelPlacement.TopLeft">
            <summary>
            Coordinates specify Top/Left
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelPlacement.TopRight">
            <summary>
            Coordinates specify Top/Right
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelPlacement.BottomLeft">
            <summary>
            Coordinates specify Bottom/Left
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelPlacement.BottomRight">
            <summary>
            Coordinates specify Bottom/Right
            </summary>
        </member>
        <member name="T:UIComponents.ImagePanel.ImagePanelProperties">
            <summary>
            Enumeration of property arguments for <see cref="E:UIComponents.ImagePanel.PropertyChange"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.BackColorProperty">
            <summary>
            <see cref="M:UIComponents.ImagePanel.OnBackColorChanged(System.EventArgs)"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.PanelGridSizeProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.PanelGridSize"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.GridColorProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.GridColor"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.SelectedColorsProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.SelectedColor"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.ImagesProperty">
            <summary>
            <see cref="M:UIComponents.ImagePanel.SetImages(System.Drawing.Bitmap,System.Int32)"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.AutoSelectProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.AutoSelect"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.DimensionsProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.Dimensions"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.DefaultImageProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.DefaultImage"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.BounceFactorProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.BounceFactor"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.MaxBounceRatioProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.MaxBounceRatio"/>
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.ImagePanelProperties.MinBounceRatioProperty">
            <summary>
            <see cref="P:UIComponents.ImagePanel.MinBounceRatio"/>
            </summary>
        </member>
        <member name="T:UIComponents.ImagePanel.PropertyChangeEventArgs">
            <summary>
            <see cref="E:UIComponents.XPPanelGroup.PropertyChange"/> event arguments
            </summary>
        </member>
        <member name="F:UIComponents.ImagePanel.PropertyChangeEventArgs.property">
            <summary>
            The enumeration for the property that changed
            </summary>
        </member>
        <member name="M:UIComponents.ImagePanel.PropertyChangeEventArgs.#ctor(UIComponents.ImagePanel.ImagePanelProperties)">
            <summary>
            Create a <c>PropertyChangeEventArgs</c>
            </summary>
            <param name="property">The enumeration for the property that changed</param>
        </member>
        <member name="P:UIComponents.ImagePanel.PropertyChangeEventArgs.Property">
            <summary>
            Get the enumeration for the property that changed
            </summary>
        </member>
        <member name="T:UIComponents.ImageSelectedEventArgs">
            <summary>
            <see cref="E:UIComponents.ImagePanel.ImageSelected"/> event arguments
            </summary>
        </member>
        <member name="F:UIComponents.ImageSelectedEventArgs.imageIndex">
            <summary>
            The image index selected (or -1 if canceled)
            </summary>
        </member>
        <member name="M:UIComponents.ImageSelectedEventArgs.#ctor(System.Int32)">
            <summary>
            Create a <c>ImageSelectedEventArgs</c> with the specified
            image index
            </summary>
            <param name="imageIndex">The index of the image selected or -1 if canceled</param>
        </member>
        <member name="P:UIComponents.ImageSelectedEventArgs.ImageIndex">
            <summary>
            Get the selected image index
            </summary>
        </member>
        <member name="T:UIComponents.ImageSet">
            <summary>
            Designer <see cref="T:System.ComponentModel.Component"/> that wraps an <see cref="T:UIComponents.ImageCollection"/>
            </summary>
            <remarks>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.ImageSet.images">
            <summary>
            The <see cref="T:UIComponents.ImageCollection"/>
            </summary>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor">
            <summary>
            Create an empty <c>ImageSet</c>
            </summary>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor(System.Drawing.Size)">
            <summary>
            Create an empty <c>ImageSet</c> with the specified
            canonical <see cref="T:System.Drawing.Size"/>
            </summary>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor(System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Create an empty <c>ImageSet</c> with the specified
            canonical <see cref="T:System.Drawing.Size"/> and
            transparent color mask value
            </summary>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor(System.Drawing.Color)">
            <summary>
            Create an empty <c>ImageSet</c> with the specified
            transparent color mask value
            </summary>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Create an <c>ImageSet</c> from the specified <i>image strip</i>
            which contains the specified number of images
            </summary>
            <param name="images">The image strip</param>
            <param name="count">Number of images in the strip</param>
        </member>
        <member name="M:UIComponents.ImageSet.#ctor(System.Drawing.Bitmap,System.Int32,System.Drawing.Color)">
            <summary>
            Create an <c>ImageSet</c> from the specified <i>image strip</i>
            which contains the specified number of images and transparent
            color mask value
            </summary>
            <param name="images">The image strip</param>
            <param name="count">Number of images in the strip</param>
            <param name="transparentColor">Transparent color mask value</param>
        </member>
        <member name="P:UIComponents.ImageSet.TransparentColor">
            <summary>
            Get/Set the transparent mask <see cref="T:System.Drawing.Color"/> value
            </summary>
        </member>
        <member name="P:UIComponents.ImageSet.Images">
            <summary>
            Get/Set the <see cref="T:UIComponents.ImageCollection"/>
            </summary>
            <remarks>
            Requires <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Content"/> for proper
            code generation (??)
            </remarks>
        </member>
        <member name="P:UIComponents.ImageSet.ImageList">
            <summary>
            Get an <see cref="P:UIComponents.ImageSet.ImageList"/> representation of the <c>ImageSet</c>
            </summary>
            <remarks>
            Use <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Hidden"/> because this is not
            a 'real' property
            </remarks>
        </member>
        <member name="P:UIComponents.ImageSet.Preview">
            <summary>
            Return an <i>image strip</i> representation of the <c>ImageSet</c>
            </summary>
        </member>
        <member name="P:UIComponents.ImageSet.Count">
            <summary>
            Return the number of images in the <c>ImageSet</c>
            </summary>
        </member>
        <member name="P:UIComponents.ImageSet.Size">
            <summary>
            Return the canonical <see cref="T:System.Drawing.Size"/> of the
            <c>ImageSet</c>
            </summary>
        </member>
        <member name="P:UIComponents.ImageSet.Width">
            <summary>
            Return the width of images in the <c>ImageSet</c>
            </summary>
            <remarks>
            Use <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Hidden"/> because this is not
            a 'real' property
            </remarks>
        </member>
        <member name="P:UIComponents.ImageSet.Height">
            <summary>
            Return the height of images in the <c>ImageSet</c>
            </summary>
            <remarks>
            Use <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Hidden"/> because this is not
            a 'real' property
            </remarks>
        </member>
        <member name="T:UIComponents.Designers.ImageSetTypeConverter">
            <summary>
            ImageSetTypeConverter designed to provide an alternate
            constructor for designer code-generation.
            </summary>
            <remarks>
            This class is no longer used. Although the implementation is valid, various
            issues with the designer and <see cref="T:UIComponents.ImageSet"/> prevent this technique
            from working (at least out-of-the-box).
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.ImageSetTypeConverter.#ctor">
            <summary>
            Create an <c>ImageSetTypeConverter</c>
            </summary>
        </member>
        <member name="M:UIComponents.Designers.ImageSetTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tell the designer we can convert to <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> so
            that we can use an alternate constructor during code-generation.
            </summary>
            <param name="context">designer context</param>
            <param name="destinationType">target conversion type</param>
            <returns>
            <see langword="true"/> if an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> is requested,
            otherwise whatever the base class says
            </returns>
        </member>
        <member name="M:UIComponents.Designers.ImageSetTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Handle a conversion
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization info</param>
            <param name="value">The value to be converted</param>
            <param name="destinationType">Target type</param>
            <returns>
            An instance of the <c>destinationType</c>
            </returns>
            <remarks>
            This code specifically handles conversion to a <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> so that
            the <see cref="T:UIComponents.ImageSet"/> can be created using a constructor of the form:
            <code>
            	new ImageSet(<see cref="T:System.Drawing.Size"/>,<see cref="T:System.Drawing.Color"/>) ;
            </code>
            <para>
            Note, the <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> is told that the instance may need further
            initialization beyond the values provided to the constructor
            </para>
            </remarks>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel">
            <summary>
            ItemLayoutPanel control
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.DefaultSpacing">
            <summary>
            Default value for <see cref="P:UIComponents.ItemLayoutPanel.ItemSpacing"/>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.DefaultPanelGradient">
            <summary>
            Default value for <see cref="P:UIComponents.ItemLayoutPanel.PanelGradient"/>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.DefaultBorderMargin">
            <summary>
            Default value for <see cref="P:UIComponents.ItemLayoutPanel.BorderMargin"/>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.defaultItemLayout">
            <summary>
            Default <see cref="T:UIComponents.ItemLayoutPanel.IItemLayout"/> handler used when a custom <see cref="T:UIComponents.ItemLayoutPanel.IItemLayout"/>
            is not specified.
            <seealso cref="P:UIComponents.ItemLayoutPanel.ItemLayout"/>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.panelGradient">
            <summary>
            The <see cref="T:UIComponents.GradientColor"/> for the background of the <c>ItemLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.borderMargin">
            <summary>
            Controls left/top/right spacing of items/controls controls within the <c>ItemLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.itemSpacing">
            <summary>
            Controls the Y spacing between <see cref="T:UIComponents.TextElement"/> items in the <c>ItemLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.backgroundBrush">
            <summary>
            Gradient brush used to draw the background
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.autoSize">
            <summary>
            <see langword="true"/> if the <c>ItemLayoutPanel</c> auto-sizes itself based upon content
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.itemLayoutHandler">
            <summary>
            Item layout handler. <seealso cref="P:UIComponents.ItemLayoutPanel.ItemLayout"/>
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.backgroundStyle">
            <summary>
            Default background style is not to have one (i.e, Transparent)
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.isInitializingComponent">
            <summary>
            <see langword="true"/> when we are in InitializeComponent()
            </summary>
            <remarks>
            <see cref="T:System.ComponentModel.ISupportInitialize"/>
            </remarks>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.items">
            <summary>
            Stores items in runtime preferred order, which may different
            from order of controls in <see cref="P:System.Windows.Forms.Control.Controls"/>
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.#ctor">
            <summary>
            Create an ItemLayoutPanel
            </summary>
            <remarks>
            The <see cref="P:System.Windows.Forms.Control.BackColor"/> property is set to <see cref="P:System.Drawing.Color.Transparent"/>, and
            the <see cref="P:System.Windows.Forms.ScrollableControl.AutoScroll"/> property is set to <see langword="true"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ShouldSerializePanelGradient">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ResetPanelGradient">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ShouldSerializeBorderMargin">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ResetBorderMargin">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.MoveItem(System.Int32,System.Int32)">
            <summary>
            Reorder a control item relative to its peers
            </summary>
            <param name="currIndex">The current index of the control item</param>
            <param name="newIndex">The new index of the control item</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.MoveItem(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Reorder a control item relative to its peers
            </summary>
            <param name="newIndex">The new index of the control item</param>
            <param name="control">The control item to move</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ShowAll(System.Boolean)">
            <summary>
            Show/Hide all controls in the <c>ItemLayoutPanel</c>
            </summary>
            <param name="showItems"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.ShowAll">
            <summary>
            Show all the controls in the <c>ItemLayoutPanel</c>
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.HideAll">
            <summary>
            Hide all the controls in the <c>ItemLayoutPanel</c>
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnPropertyChange(UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty)">
            <summary>
            Property change handler
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.SetBestHeight(System.Int32)">
            <summary>
            Set the height of the <c>ItemLayoutPanel</c> and if applicable, the height 
            of parent <see cref="T:UIComponents.XPPanel"/>'s panel area to match our height (with 
            a little margin)
            </summary>
            <param name="bestHeight">The best height as determined by the layout engine</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.UpdateItems">
            <summary>
            Updates the layout of control items via an implementation of <see cref="T:UIComponents.ItemLayoutPanel.IItemLayout"/>
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnBackColorChanged(System.EventArgs)">
            <summary>
            Handle this change since we may be drawing with the <see cref="P:System.Windows.Forms.Control.BackColor"/>
            depending on the value of <see cref="P:UIComponents.ItemLayoutPanel.BackgroundStyle"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the background of the <c>ItemLayoutPanel</c> using the appropriate color(s) for the panel
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnVisibleChanged(System.EventArgs)">
            <summary>
            Update our parent and our own item layout on visibility changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Reevaluate our layout when asked
            </summary>
            <param name="levent">ignored</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden to handle the addition of items
            </summary>
            <param name="e">ControlAdded event args</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden to provide special handling for items
            </summary>
            <param name="e">ControlRemoved event args</param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.OnSizeChanged(System.EventArgs)">
            <summary>
            Our size changed, relocate all panels
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.BeginInit">
            <summary>
            Set flag noting that we are in InitializeComponent()
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.EndInit">
            <summary>
            Clear flag noting that we are in InitializeComponent()
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.Control_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            When a control hides or shows we reset the scroll position and
            update the panels
            </summary>
            <param name="sender">The control being hidden/shown</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.HasItems">
            <summary>
            <see langword="true"/> if the <c>ItemLayoutPanel</c> has one or more child controls
            </summary>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.Items">
            <summary>
            Get the <see cref="T:System.Collections.ArrayList"/> of control items
            </summary>
            <remarks>
            The controls in the <c>Items</c> property are in appearance order
            <para>
            You should NOT directly modify the contents of this member
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.BackgroundStyle">
            <summary>
            Get/Set the type of background drawing
            </summary>
            <remarks>
            <see cref="P:UIComponents.ItemLayoutPanel.BackgroundStyle"/> for more information.
            
            Note: This is probably NOT one of my better ideas...
            </remarks>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.PanelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> used to draw the background of the <c>ItemLayoutPanel</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.PanelGradientProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.BorderMargin">
            <summary>
            Sets the left/right/top margins for items/controls within the <c>ItemLayoutPanel</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.BorderMarginProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.ItemSpacing">
            <summary>
            Y spacing between items/controls controls within the <c>ItemLayoutPanel</c>
            </summary>
            <remarks>
            Default value for this property is <see cref="F:UIComponents.ItemLayoutPanel.DefaultSpacing"/>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.ItemSpacingProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.ItemLayout">
            <summary>
            Get/Set the ItemLayout implementation (or <see langword="null"/> for the default)
            </summary>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.AutoSize">
            <summary>
            <see langword="true"/> if the <c>ItemLayoutPanel</c> should resize its parent
            <see cref="T:UIComponents.XPPanel"/> based on its size
            </summary>
        </member>
        <member name="E:UIComponents.ItemLayoutPanel.PropertyChange">
            <summary>
            Register/Unregister for property change notifications
            </summary>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.BackgroundBrush">
            <summary>
            Get/Set the background brush
            </summary>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel.IItemLayout">
            <summary>
            Interface used by <see cref="T:UIComponents.ItemLayoutPanel"/> to provide item layout
            functionality
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.IItemLayout.LayoutItems(System.Windows.Forms.Control)">
            <summary>
            Layout the child controls for the specified <see cref="P:System.Windows.Forms.Control.Parent"/>
            </summary>
            <param name="parent">The parent control whose children need to be layed out</param>
            <returns>
            The "best height" for <c>Parent</c>
            </returns>
            <remarks>
            This method should be implemented as:
            <code>
            	return LayoutItems(parent,parent.Controls) ;
            </code>
            </remarks>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.IItemLayout.LayoutItems(System.Windows.Forms.Control,System.Collections.IEnumerable)">
            <summary>
            Layout a set of child controls for the specified <see cref="P:System.Windows.Forms.Control.Parent"/>
            </summary>
            <param name="parent">The parent control</param>
            <param name="controls">The set of controls to be layed out</param>
            <returns>
            The "best height" for <c>Parent</c>
            </returns>
            <remarks>
            This method provides an oppurtunity for selective layout, or to specify a
            different control order than the default
            </remarks>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel.DefaultItemLayout">
            <summary>
            Default implementation of <see cref="T:UIComponents.ItemLayoutPanel.IItemLayout"/> used by <see cref="T:UIComponents.ItemLayoutPanel"/>
            when a custom <see cref="T:UIComponents.ItemLayoutPanel.IItemLayout"/> is not specified 
            </summary>
            <remarks>
            This is a simple algorithm for (left) aligning and spacing items within an <see cref="T:UIComponents.ItemLayoutPanel"/>
            <seealso cref="P:UIComponents.ItemLayoutPanel.ItemLayout"/>
            </remarks>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.DefaultItemLayout.LayoutItems(System.Windows.Forms.Control,System.Collections.IEnumerable)">
            <summary>
            Layout all visible controls, left-aligned and using the spacing
            information provided by the parent
            </summary>
            <param name="parent">An instance of ItemLayoutPanel</param>
            <param name="controls">The controls to be layed out</param>
            <returns>
            The offset of the bottom of the last placed control + the
            <see cref="P:UIComponents.ItemLayoutPanel.BorderMargin"/>
            </returns>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.DefaultItemLayout.LayoutItems(System.Windows.Forms.Control)">
            <summary>
            Layout the child controls
            </summary>
            <param name="parent">An instance of <see cref="T:UIComponents.ItemLayoutPanel"/></param>
            <returns>The best height for the <see cref="T:UIComponents.ItemLayoutPanel"/></returns>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty">
            <summary>
            Enumeration used for <see cref="E:UIComponents.ItemLayoutPanel.PropertyChange"/> events
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.PanelGradientProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.PanelGradient"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.BorderMarginProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.BorderMargin"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.ItemSpacingProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.ItemSpacing"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.AutoSizeProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.AutoSize"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.ItemLayoutProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.ItemLayout"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.BackgroundStyleProperty">
            <summary>
            <see cref="P:UIComponents.ItemLayoutPanel.BackgroundStyle"/> property
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty.BackColorProperty">
            <summary>
            <see cref="P:System.Windows.Forms.Control.BackColor"/> property
            </summary>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel.PropertyChangeHandler">
            <summary>
            Delegate signature for <see cref="E:UIComponents.ItemLayoutPanel.PropertyChange"/> events
            </summary>
        </member>
        <member name="T:UIComponents.ItemLayoutPanel.PropertyChangeEventArgs">
            <summary>
            EventArgs for <see cref="E:UIComponents.XPPanel.PropertyChange"/> events
            </summary>
        </member>
        <member name="F:UIComponents.ItemLayoutPanel.PropertyChangeEventArgs.property">
            <summary>
            The property that changed
            </summary>
        </member>
        <member name="M:UIComponents.ItemLayoutPanel.PropertyChangeEventArgs.#ctor(UIComponents.ItemLayoutPanel.ItemLayoutPanelProperty)">
            <summary>
            Create a new <c>XPPanelPropertyChangeArgs</c> with the specified
            property enumeration value
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:UIComponents.ItemLayoutPanel.PropertyChangeEventArgs.XPPanelProperty">
            <summary>
            Get the <see cref="T:UIComponents.XPPanelProperties"/> property that changed
            </summary>
        </member>
        <member name="T:UIComponents.RoundedRect">
            <summary>
            Summary description for RoundedRect.
            </summary>
        </member>
        <member name="T:UIComponents.StateImageItemTypes">
            <summary>
            Enumeration of standard image states
            </summary>
        </member>
        <member name="F:UIComponents.StateImageItemTypes.Normal">
            <summary>
            Normal (enabled) image
            </summary>
        </member>
        <member name="F:UIComponents.StateImageItemTypes.Highlight">
            <summary>
            Hot image (mouse over)
            </summary>
        </member>
        <member name="F:UIComponents.StateImageItemTypes.Pressed">
            <summary>
            Pressed image (mouse down)
            </summary>
        </member>
        <member name="F:UIComponents.StateImageItemTypes.Disabled">
            <summary>
            Disabled image
            </summary>
        </member>
        <member name="T:UIComponents.StateImageItems">
            <summary>
            Provides image index mapping for standard image states
            </summary>
            <remarks>
            <para>This class is <see cref="T:System.SerializableAttribute"/> but does not implement 
            <see cref="T:System.Runtime.Serialization.ISerializable"/></para>
            </remarks>
        </member>
        <member name="M:UIComponents.StateImageItems.#ctor">
            <summary>
            Create an <c>StateImageItems</c> with all state values = -1
            </summary>
        </member>
        <member name="M:UIComponents.StateImageItems.IsDefined(UIComponents.StateImageItemTypes)">
            <summary>
            Determine if an image state has a defined image mapping
            </summary>
            <param name="state">The state</param>
            <returns>
            <see langword="true"/> if the state has an associated image mapping,
            <see langword="false"/> otherwise
            </returns>
        </member>
        <member name="M:UIComponents.StateImageItems.IsImage(UIComponents.StateImageItemTypes)">
            <summary>
            Determine if an image state has a defined image mapping that maps
            to an actual image
            </summary>
            <param name="state">The state</param>
            <returns>
            <see langword="true"/> if the state has an associated image mapping 
            and valid image, <see langword="false"/> otherwise
            </returns>
        </member>
        <member name="P:UIComponents.StateImageItems.Normal">
            <summary>
            Get/Set the <i>normal</i> state image index
            </summary>
            <remarks>Uses custom <see cref="T:System.Drawing.Design.UITypeEditor"/> that shows a popup of all
            images in the <see cref="T:UIComponents.ImageSet"/> See <see cref="T:UIComponents.Designers.ImageMapEditor"/>
            </remarks>
        </member>
        <member name="P:UIComponents.StateImageItems.NormalImage">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Image"/> associated with the <i>normal</i> state
            </summary>
        </member>
        <member name="P:UIComponents.StateImageItems.Highlight">
            <summary>
            Get/Set the <i>highlight</i> state image index
            </summary>
            <remarks>Uses custom <see cref="T:System.Drawing.Design.UITypeEditor"/> that shows a popup of all
            images in the <see cref="T:UIComponents.ImageSet"/> See <see cref="T:UIComponents.Designers.ImageMapEditor"/>
            </remarks>
        </member>
        <member name="P:UIComponents.StateImageItems.HighlightImage">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Image"/> associated with the <i>highlight</i> state
            </summary>
        </member>
        <member name="P:UIComponents.StateImageItems.Pressed">
            <summary>
            Get/Set the <i>pressed</i> state image index
            </summary>
            <remarks>Uses custom <see cref="T:System.Drawing.Design.UITypeEditor"/> that shows a popup of all
            images in the <see cref="T:UIComponents.ImageSet"/> See <see cref="T:UIComponents.Designers.ImageMapEditor"/>
            </remarks>
        </member>
        <member name="P:UIComponents.StateImageItems.PressedImage">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Image"/> associated with the <i>pressed</i> state
            </summary>
        </member>
        <member name="P:UIComponents.StateImageItems.Disabled">
            <summary>
            Get/Set the <i>disabled</i> state image index
            </summary>
            <remarks>Uses custom <see cref="T:System.Drawing.Design.UITypeEditor"/> that shows a popup of all
            images in the <see cref="T:UIComponents.ImageSet"/>. See <see cref="T:UIComponents.Designers.ImageMapEditor"/>
            </remarks>
        </member>
        <member name="P:UIComponents.StateImageItems.DisabledImage">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Image"/> associated with the <i>disabled</i> state
            </summary>
        </member>
        <member name="T:UIComponents.Designers.TextElementTypeConverter">
            <summary>
            TextElementTypeConverterTypeConverter provides an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> used
            for designer code generation. This allows an alternate constructor to
            be specified, and in due to the current design, is required to allow TextElements to 
            be serializedusing Code Generation.
            </summary>
            <remarks>
            The constructor selected is necessary to work around other 'weird' designer issues.
            </remarks>
        </member>
        <member name="M:UIComponents.Designers.TextElementTypeConverter.#ctor">
            <summary>
            Create an <c>TextElementTypeConverter</c>
            </summary>
        </member>
        <member name="M:UIComponents.Designers.TextElementTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Signal that we can convert to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> (if asked...)
            </summary>
            <param name="context">designer context</param>
            <param name="destinationType">Target type</param>
            <returns>
            <see langword="true"/> if the designer asks for an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>,
            otherwise whatever the base class says
            </returns>
        </member>
        <member name="M:UIComponents.Designers.TextElementTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> if requested
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization</param>
            <param name="value">the instance to convert</param>
            <param name="destinationType">The target type</param>
            <returns>
            An <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> if requested, otherwise whatever
            the base class returns
            </returns>
            <remarks>
            The constructor selected is necessary to work around 'weird' designer issues.
            </remarks>
        </member>
        <member name="T:UIComponents.TextLayoutPanel">
            <summary>
            TextLayoutPanel
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.DefaultSpacing">
            <summary>
            Default value for <see cref="P:UIComponents.TextLayoutPanel.TextSpacing"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.DefaultPanelGradient">
            <summary>
            Default value for <see cref="P:UIComponents.TextLayoutPanel.PanelGradient"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.DefaultBorderMargin">
            <summary>
            Default value for <see cref="P:UIComponents.TextLayoutPanel.BorderMargin"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.grayScaleAttributes">
            <summary>
            Standard gray-scale conversion for images
            </summary>
            <remarks>
            This is a very generic definition and is defined as <see langword="state"/> so
            that it can be shared by all instances of <c>TextLayoutPanel</c>
            </remarks>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.panelGradient">
            <summary>
            The <see cref="T:UIComponents.GradientColor"/> for the background of the <c>TextLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.textElementCollection">
            <summary>
            <c>TextElement</c> collection
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.borderMargin">
            <summary>
            Controls left/top/right spacing of <see cref="T:UIComponents.TextLayoutPanel"/> controls within the <c>TextLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.textSpacing">
            <summary>
            Controls the Y spacing between <see cref="T:UIComponents.TextElement"/> items in the <c>TextLayoutPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.isLayoutDirty">
            <summary>
            Tracks when we need to recalculate our layout
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.imageSize">
            <summary>
            Force images into this size (or no restriction if Size.Empty)
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.backgroundBrush">
            <summary>
            Gradient brush used to draw the background
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.autoSize">
            <summary>
            <see langword="true"/> if the panel auto-sizes itself based upon content
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.backgroundStyle">
            <summary>
            Default background style is not to have one (i.e, Transparent)
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.redrawSuspended">
            <summary>
            Used to indicate that redrawing of TextElements is suspended 
            (used when large #'s of updates occur as a single transaction)
            </summary>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.#ctor">
            <summary>
            Create a <c>TextLayoutPanel</c>
            </summary>
            <remarks>
            By default the <see cref="P:System.Windows.Forms.Control.Font"/> is set to 'Microsoft Verdana, 8.5'
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ShouldSerializeElements">
            <summary>
            If we have any elements then serialize them
            </summary>
            <returns>
            <see langword="true"/> if we have any defined TextElement(s)
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ResetElements">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ShouldSerializePanelGradient">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ResetPanelGradient">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ShouldSerializeBorderMargin">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.ResetBorderMargin">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.DisableRedraw">
            <summary>
            Disable redrawing of <see cref="T:UIComponents.TextElement"/> contents
            </summary>
            <remarks>
            This method is 'reference' counted. Each call to this method
            must be matched by a call to <see cref="M:UIComponents.TextLayoutPanel.EnableRedraw"/>
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.EnableRedraw">
            <summary>
            Re-enable drawing of <see cref="T:UIComponents.TextElement"/> contents
            </summary>
            <remarks>
            This method should be called once for each call to <see cref="M:UIComponents.TextLayoutPanel.DisableRedraw"/>
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnPropertyChange(UIComponents.TextLayoutPanel.TextLayoutPanelProperty)">
            <summary>
            Handles internal property change events
            </summary>
            <param name="property">The enumeration for the property that changed</param>
            <remarks>
            These events are NOT exposed to listeners. You must derive and override 
            to get this style of functionaltiy
            </remarks>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.GetTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
            <summary>
            Measure the specified text to establish the <c>vertical extents</c> of its
            bounding box. This way we can support multi-line items
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object being used</param>
            <param name="width">The horizontal extents/limits</param>
            <param name="font">The font of the text</param>
            <param name="stringFormat">The <see cref="T:System.Drawing.StringFormat"/> options</param>
            <param name="text">The actual text</param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.GetElementFont(UIComponents.ITextElement)">
            <summary>
            Get the <see cref="T:System.Drawing.Font"/> used by a <see cref="T:UIComponents.TextElement"/>
            </summary>
            <param name="textElement">The TextElement being drawn/measured</param>
            <returns>
            The <see cref="P:UIComponents.TextElement.Font"/> value, or if <see langword="null"/> the
            <see cref="T:System.Drawing.Font"/> of this <c>TextLayoutPanel</c>
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.GetElementTextColor(UIComponents.ITextElement)">
            <summary>
            Get the <see cref="T:System.Drawing.Color"/> used by a <see cref="T:UIComponents.TextElement"/>
            </summary>
            <param name="textElement">The TextElement being drawn/measured</param>
            <returns>
            The <see cref="P:UIComponents.TextElement.Font"/> value, or if <see langword="null"/> the
            <see cref="T:System.Drawing.Font"/> of this <c>TextLayoutPanel</c>
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.SetBestHeight(System.Int32)">
            <summary>
            Set the height of the <c>TextLayoutPanel</c> and if applicable, the height 
            of parent <see cref="T:UIComponents.XPPanel"/>'s panel area to match our height (with 
            a little margin)
            </summary>
            <param name="bestHeight">The best height as determined by the layout engine</param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.RecalculateLayout(System.Drawing.Graphics)">
            <summary>
            Recalculate the layout of all <see cref="T:UIComponents.TextElement"/> content
            </summary>
            <param name="graphics">The graphics to be used for drawing</param>
            <returns>
            The array of <see cref="T:UIComponents.TextElement"/> instances
            </returns>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the background of the <c>TextLayoutPanel</c> using the gradient color for the panel and place
            all the visible <c>TextElement</c> content in their appropriate position
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnSizeChanged(System.EventArgs)">
            <summary>
            Layout is dirty if the size of the control changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnBackColorChanged(System.EventArgs)">
            <summary>
            The <see cref="P:UIComponents.TextLayoutPanel.BackgroundBrush"/> may need to be updated
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnFontChanged(System.EventArgs)">
            <summary>
            The layout is dirty since 1 or more text elements may be
            using our 'default' <see cref="T:System.Drawing.Font"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.OnForeColorChanged(System.EventArgs)">
            <summary>
            Need to redraw since 1 or more text elements may be
            using our 'default' <see cref="P:System.Windows.Forms.Control.ForeColor"/>
            </summary>
            <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.textElementCollection_Change(System.Object,System.EventArgs)">
            <summary>
            The contents of the <see cref="P:UIComponents.TextLayoutPanel.Elements"/> collection has changed in an unspecified
            way (added, removed, moved, etc...)
            </summary>
            <param name="sender">The <see cref="T:UIComponents.TextElementCollection"/> that changed</param>
            <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
        </member>
        <member name="M:UIComponents.TextLayoutPanel.textElementCollection_ElementChange(System.Object,UIComponents.TextElementPropertyChangeEventArgs)">
            <summary>
            The attributes of a <see cref="T:UIComponents.TextElement"/> within the <see cref="P:UIComponents.TextLayoutPanel.Elements"/> collection 
            has changed
            </summary>
            <param name="sender">The <see cref="T:UIComponents.TextElementCollection"/> that changed</param>
            <param name="e"><see cref="T:UIComponents.TextElementPropertyChangeEventArgs"/> specifying the <see cref="T:UIComponents.TextElement"/>
            and the property that changed</param>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.GrayScaleAttributes">
            <summary>
            Returns the standard grayscale matrix for image transformations
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.HasElements">
            <summary>
            <see langword="true"/> if the <c>ItemLayoutPanel</c> has one or more child controls
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.BackgroundStyle">
            <summary>
            Get the <see cref="T:System.Collections.ArrayList"/> of control items
            </summary>
            <remarks>
            The controls in the <c>Items</c> property are in appearance order
            <para>
            You should NOT directly modify the contents of this member
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.Elements">
            <summary>
            The <c>TextElement</c> Collection
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.PanelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> used to draw the background of the <c>TextLayoutPanel</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.PanelGradientProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.BorderMargin">
            <summary>
            Sets the left/right/top margins for <see cref="T:UIComponents.TextElement"/> instance within the <c>TextLayoutPanel</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.BorderMarginProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.TextSpacing">
            <summary>
            Y spacing between <see cref="T:UIComponents.TextElement"/> instances within the <c>TextLayoutPanel</c>
            </summary>
            <remarks>
            Default value for this property is <see cref="F:UIComponents.TextLayoutPanel.DefaultSpacing"/>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.TextSpacingProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.ImageSize">
            <summary>
            If non-empty, restricts the display size of images for <see cref="T:UIComponents.TextElement"/>'s
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.IsRedrawSuspended">
            <summary>
            <see langword="true"/> if redrawing of <see cref="T:UIComponents.TextElement"/> content is disabled
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.AutoSize">
            <summary>
            Get/Set whether this <c>TextLayoutPanel</c> automatically resizes itself (and
            possibly its parent) to match its contents
            </summary>
        </member>
        <member name="P:UIComponents.TextLayoutPanel.BackgroundBrush">
            <summary>
            The <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> used to draw the background
            </summary>
            <remarks>
            When the <see cref="P:UIComponents.TextLayoutPanel.BackgroundStyle"/> is <see cref="F:UIComponents.BackgroundStyle.Solid"/>
            the brush is created with the <see cref="P:System.Windows.Forms.Control.BackColor"/> value, otherwise
            if <see cref="P:UIComponents.TextLayoutPanel.BackgroundStyle"/> is <see cref="F:UIComponents.BackgroundStyle.Gradient"/>
            we use the <see cref="P:UIComponents.TextLayoutPanel.PanelGradient"/> color values.
            
            In the case of <see cref="F:UIComponents.BackgroundStyle.Transparent"/> the result is <b>undefined</b>
            </remarks>
        </member>
        <member name="T:UIComponents.TextLayoutPanel.TextLayoutPanelProperty">
            <summary>
            Emumeration of properties that trigger internal property change events
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.ElementsProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.Elements"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.PanelGradientProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.PanelGradient"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.BorderMarginProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.BorderMargin"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.TextSpacingProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.TextSpacing"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.ImageSizeProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.ImageSize"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.AutoSizeProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.AutoSize"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.BackgroundStyleProperty">
            <summary>
            See <see cref="P:UIComponents.TextLayoutPanel.BackgroundStyle"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.BackColorProperty">
            <summary>
            See <see cref="P:System.Windows.Forms.Control.BackColor"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.ForeColorProperty">
            <summary>
            See <see cref="P:System.Windows.Forms.Control.ForeColor"/> property
            </summary>
        </member>
        <member name="F:UIComponents.TextLayoutPanel.TextLayoutPanelProperty.FontProperty">
            <summary>
            See <see cref="P:System.Windows.Forms.Control.Font"/> property
            </summary>
        </member>
        <member name="T:UIComponents.TextElementCollection">
            <summary>
            A collection of <see cref="T:UIComponents.TextElement"/> instances
            </summary>
        </member>
        <member name="F:UIComponents.TextElementCollection.changeListeners">
            <summary>
            Listeners to <see cref="E:UIComponents.TextElementCollection.Change"/> events
            </summary>
        </member>
        <member name="F:UIComponents.TextElementCollection.elementChangeListeners">
            <summary>
            Listeners to <see cref="E:UIComponents.TextElementCollection.ElementChange"/> events
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.#ctor">
            <summary>
            Create an empty <see cref="T:UIComponents.TextElement"/> collection
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnChangeEvent">
            <summary>
            Fire a <see cref="E:UIComponents.TextElementCollection.Change"/> event
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnElementChangeEvent(UIComponents.TextElementPropertyChangeEventArgs)">
            <summary>
            Fire a <see cref="E:UIComponents.TextElementCollection.ElementChange"/> event
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.Insert(System.Int32,UIComponents.ITextElement)">
            <summary>
            Insert a <see cref="T:UIComponents.TextElement"/> at the specified location
            </summary>
            <param name="index">The index</param>
            <param name="textElement">The <see cref="T:UIComponents.TextElement"/></param>
        </member>
        <member name="M:UIComponents.TextElementCollection.Add(UIComponents.ITextElement)">
            <summary>
            Add a <see cref="T:UIComponents.TextElement"/> to the collection
            </summary>
            <param name="textElement">The <see cref="T:UIComponents.TextElement"/></param>
            <returns>
            The index of the inserted item
            </returns>
        </member>
        <member name="M:UIComponents.TextElementCollection.AddRange(UIComponents.ITextElement[])">
            <summary>
            Add 'N' <see cref="T:UIComponents.TextElement"/> items to the collection
            </summary>
            <param name="textElements">The <see cref="T:UIComponents.TextElement"/>'s to be added</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.MoveTo(System.Int32,System.Int32)">
            <summary>
            Reorder a <see cref="T:UIComponents.TextElement"/> within the collection
            </summary>
            <param name="currIndex">The current index of the <see cref="T:UIComponents.TextElement"/></param>
            <param name="newIndex">The new index of the <see cref="T:UIComponents.TextElement"/></param>
        </member>
        <member name="M:UIComponents.TextElementCollection.MoveTo(System.Int32,UIComponents.TextElement)">
            <summary>
            Reorder a <see cref="T:UIComponents.TextElement"/> within the collection
            </summary>
            <param name="newIndex">The new index of the <see cref="T:UIComponents.TextElement"/></param>
            <param name="element">The <see cref="T:UIComponents.TextElement"/> to move</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.HideAll">
            <summary>
            Hide all the <see cref="T:UIComponents.TextElement"/> items within the collection
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.ShowAll">
            <summary>
            Show all the <see cref="T:UIComponents.TextElement"/> items within the collection
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.ShowAll(System.Boolean)">
            <summary>
            ShowHide all the <see cref="T:UIComponents.TextElement"/> items within the collection
            </summary>
            <param name="showAllElements"><see langword="true"/> to show all the elements, <see langword="false"/> to hide</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.ToArray">
            <summary>
            Copy the <c>TextElementCollection</c> to an array
            </summary>
            <returns>The array of <see cref="T:UIComponents.TextElement"/> items in the collection</returns>
        </member>
        <member name="M:UIComponents.TextElementCollection.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the <c>TextElementCollection</c> to an array
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.IndexOf(UIComponents.ITextElement)">
            <summary>
            Get the index of the specified <see cref="T:UIComponents.TextElement"/>
            </summary>
            <param name="textElement">The <c>TextElement</c> to find</param>
            <returns>
            The index of the <see cref="T:UIComponents.TextElement"/> within the <c>TextElementCollection</c>
            or -1 if it is not a member
            </returns>
        </member>
        <member name="M:UIComponents.TextElementCollection.Contains(UIComponents.ITextElement)">
            <summary>
            Get the index of the specified <see cref="T:UIComponents.TextElement"/>
            </summary>
            <param name="textElement">The <c>TextElement</c> to find</param>
            <returns>
            <see langword="true"/> if the <see cref="T:UIComponents.TextElement"/> is a member
            of the <c>TextElementCollection</c>
            </returns>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Called when a <see cref="T:UIComponents.TextElement"/> is inserted by the designer
            </summary>
            <param name="index">Index where item was inserted</param>
            <param name="value">The item inserted (<see cref="T:UIComponents.TextElement"/>)</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnClear">
            <summary>
            Called before the <c>TextElementCollection</c> is cleared by the designer
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnClearComplete">
            <summary>
            Called after the <c>TextElementCollection</c> is cleared by the designer
            </summary>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Called when a <see cref="T:UIComponents.TextElement"/> is 'set' by the designer
            </summary>
            <param name="index">Index where item was set</param>
            <param name="newValue">The new item value (<see cref="T:UIComponents.TextElement"/>)</param>
            <param name="oldValue">The old item value (<see cref="T:UIComponents.TextElement"/>)</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Called when a <see cref="T:UIComponents.TextElement"/> is removed by the designer
            </summary>
            <param name="index">Index where item was set</param>
            <param name="oldValue">The old item value (<see cref="T:UIComponents.TextElement"/>)</param>
        </member>
        <member name="M:UIComponents.TextElementCollection.TextElementCollection_PropertyChange(System.Object,UIComponents.TextElementPropertyChangeEventArgs)">
            <summary>
            Handle <see cref="T:UIComponents.TextElement"/> changes so they can be forwarded if neccessary
            </summary>
            <param name="sender">The <see cref="T:UIComponents.TextElement"/></param>
            <param name="e"><see cref="T:UIComponents.TextElementPropertyChangeEventArgs"/> describing the property change</param>
        </member>
        <member name="E:UIComponents.TextElementCollection.Change">
            <summary>
            Register/Unregister for changes to the <c>TextElementCollection</c>
            </summary>
        </member>
        <member name="E:UIComponents.TextElementCollection.ElementChange">
            <summary>
            Register/Unregister for changes to the <c>TextElement</c> instances
            in the <c>TextElementCollection</c>
            </summary>
        </member>
        <member name="P:UIComponents.TextElementCollection.Item(System.Int32)">
            <summary>
            Get/Set the <c>TextElement</c> at the specified index
            </summary>
        </member>
        <member name="T:UIComponents.TextElementProperty">
            <summary>
            Shared property enumeration for <see cref="T:UIComponents.TextStyle"/> and <see cref="T:UIComponents.TextElement"/>
            </summary>
            <remarks>
            This "sharing" is for historical reasons
            </remarks>
        </member>
        <member name="F:UIComponents.TextElementProperty.FontProperty">
            <summary>
            Font property
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.TextColorProperty">
            <summary>
            TextColor property
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.BackColorProperty">
            <summary>
            BackColor property
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.HorizontalAlignmentProperty">
            <summary>
            Horizontal Alignment Property
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.VerticalAlignmentProperty">
            <summary>
            Vertical Alignment Property
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.SpacingAdjustmentProperty">
            <summary>
            See <see cref="P:UIComponents.TextStyle.SpacingAdjustment"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.ImageSetProperty">
            <summary>
            See <see cref="P:UIComponents.TextStyle.ImageSet"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.ImageProperty">
            <summary>
            See <see cref="P:UIComponents.TextElement.Image"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.TextProperty">
            <summary>
            <see cref="P:UIComponents.TextElement.Text"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.PrefixProperty">
            <summary>
            <see cref="P:UIComponents.TextElement.Prefix"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.IndentProperty">
            <summary>
            <see cref="P:UIComponents.TextStyle.Indent"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.StyleProperty">
            <summary>
            <see cref="P:UIComponents.TextElement.TextStyle"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.VisibleProperty">
            <summary>
            <see cref="P:UIComponents.TextElement.Visible"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElementProperty.OtherProperty">
            <summary>
            Any other property not specifically described
            </summary>
        </member>
        <member name="T:UIComponents.TextElementPropertyChangeEventHandler">
            <summary>
            Delegate signature for <see cref="T:UIComponents.TextElementProperty"/> style property 
            change event arguments
            </summary>
        </member>
        <member name="T:UIComponents.TextElementPropertyChangeEventArgs">
            <summary>
            Represents a <see cref="T:UIComponents.TextElementProperty"/> property change event
            </summary>
        </member>
        <member name="F:UIComponents.TextElementPropertyChangeEventArgs.property">
            <summary>
            The property that changed
            </summary>
        </member>
        <member name="M:UIComponents.TextElementPropertyChangeEventArgs.#ctor(UIComponents.TextElementProperty)">
            <summary>
            Create a <c>TextElementPropertyChangeEventArgs</c>
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:UIComponents.TextElementPropertyChangeEventArgs.Property">
            <summary>
            Get the <see cref="T:UIComponents.TextElementProperty"/> that changed
            </summary>
        </member>
        <member name="T:UIComponents.ITextElement">
            <summary>
            Generic interface for a 'Text Element'
            </summary>
        </member>
        <member name="P:UIComponents.ITextElement.Font">
            <summary>
            Get the <see cref="T:System.Drawing.Font"/> of the <c>ITextElement</c>
            </summary>
        </member>
        <member name="P:UIComponents.ITextElement.TextColor">
            <summary>
            Get the foreground <see cref="T:System.Drawing.Color"/> of the <c>ITextElement</c>
            </summary>
            <remarks>
            If this value is <see cref="F:System.Drawing.Color.Empty"/> then the <see cref="P:System.Windows.Forms.Control.ForeColor"/> of
            the parent/owner is used</remarks>
        </member>
        <member name="P:UIComponents.ITextElement.BackColor">
            <summary>
            Get the background <see cref="T:System.Drawing.Color"/> of the <c>ITextElement</c>
            </summary>
            <remarks>
            If this value is <see cref="F:System.Drawing.Color.Empty"/> then the <see cref="P:System.Windows.Forms.Control.BackColor"/> of
            the parent/owner is used
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.Prefix">
            <summary>
            Get the 'label' text content
            </summary>
            <remarks>
            Use of the <c>Prefix</c> property results in output such as:
            <code>
            {Prefix}: {Text}
            </code>
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.Text">
            <summary>
            Get the text content
            </summary>
        </member>
        <member name="P:UIComponents.ITextElement.Image">
            <summary>
            Get an <see cref="P:UIComponents.ITextElement.Image"/> associated with the <c>ITextElement</c>
            </summary>
        </member>
        <member name="P:UIComponents.ITextElement.HorzAlign">
            <summary>
            Get the horizontal alignment associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            The default value is <see cref="F:System.Drawing.StringAlignment.Near"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.VertAlign">
            <summary>
            Get the vertical alignment associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            The default value is <see cref="F:System.Drawing.StringAlignment.Near"/>
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.SpacingAdjustment">
            <summary>
            Get the <see cref="P:UIComponents.TextStyle.SpacingAdjustment"/>
            associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            Spacing adjustment effects the relative distance between this
            <c>ITextElement</c> and it's two nearest peer's
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.Indent">
            <summary>
            Get the left indent (in pixels) for the <c>ITextElement</c>
            </summary>
            <remarks>
            The default value for this property is zero (0)
            </remarks>
        </member>
        <member name="P:UIComponents.ITextElement.Visible">
            <summary>
            Get the shwo/hide value for the <c>ITextElement</c>
            </summary>
        </member>
        <member name="P:UIComponents.ITextElement.Item(System.String)">
            <summary>
            Get/Set an arbitrary property for a <c>ITextElement</c>
            </summary>
        </member>
        <member name="E:UIComponents.ITextElement.PropertyChange">
            <summary>
            Register/Unregister for property change events
            </summary>
        </member>
        <member name="T:UIComponents.TextElement">
            <summary>
            Default implementation of <see cref="T:UIComponents.ITextElement"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.prefix">
            <summary>
            Name value for the Text Element
            </summary>
            <remarks>
            Only used for {name}: {value} elements
            </remarks>
        </member>
        <member name="F:UIComponents.TextElement.text">
            <summary>
            Text for the Text Element
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.image">
            <summary>
            Image associated with the element
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.imageIndex">
            <summary>
            Maps into TextStyle.ImageSet
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.visible">
            <summary>
            <see langword="true"/> if the <c>TextElement</c> is Visible
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.textStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:UIComponents.TextElement.properties">
            <summary>
            Allows arbitrary properties to be associatd with TextElement
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor">
            <summary>
            Construct a <c>TextElement</c> with default properties
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(System.String)">
            <summary>
            Construct a <c>TextElement</c> with the specified <see cref="P:UIComponents.TextElement.Text"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(System.Object)">
            <summary>
            Construct a <c>TextElement</c> using the specified object for the 
            <see cref="P:UIComponents.TextElement.Text"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(System.String,System.Object)">
            <summary>
            Construct a <c>TextElement</c> with the specified <see cref="P:UIComponents.TextElement.Prefix"/> and <see cref="P:UIComponents.TextElement.Text"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(System.String,System.String)">
            <summary>
            Construct a <c>TextElement</c> with the specified <see cref="P:UIComponents.TextElement.Prefix"/> and <see cref="P:UIComponents.TextElement.Text"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(System.String,System.String,System.Drawing.Image)">
            <summary>
            Construct a <c>TextElement</c> with the specified <see cref="P:UIComponents.TextElement.Prefix"/>,
            <see cref="P:UIComponents.TextElement.Text"/>, and <see cref="P:UIComponents.TextElement.Image"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.#ctor(UIComponents.TextStyle)">
            <summary>
            Construct a <c>TextElement</c> with the specified <see cref="P:UIComponents.TextElement.TextStyle"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextElement.ToString">
            <summary>
            Convert the <c>TextElement</c> to it's presentation/content form
            </summary>
            <returns>
            <c>{<see cref="P:UIComponents.TextElement.Prefix"/>}: {<see cref="P:UIComponents.TextElement.Text"/>}</c>, where Prefix is optional
            </returns>
        </member>
        <member name="M:UIComponents.TextElement.OnPropertyChange(UIComponents.TextElementProperty)">
            <summary>
            Fire a <see cref="E:UIComponents.TextElement.PropertyChange"/> event to listeners
            </summary>
            <param name="property">The property that changed</param>
        </member>
        <member name="M:UIComponents.TextElement.textStyle_PropertyChange(System.Object,UIComponents.TextElementPropertyChangeEventArgs)">
            <summary>
            Propagate <see cref="E:UIComponents.TextStyle.PropertyChange"/> events to our owner/parent/listeners
            </summary>
            <param name="sender">The <see cref="P:UIComponents.TextElement.TextStyle"/> that changed</param>
            <param name="e">The property that changed</param>
        </member>
        <member name="E:UIComponents.TextElement.PropertyChange">
            <summary>
            Register/Unregister a property change listener
            </summary>
        </member>
        <member name="P:UIComponents.TextElement.Font">
            <summary>
            Get the <see cref="T:System.Drawing.Font"/> of the <c>TextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see langword="null"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.TextColor">
            <summary>
            Get the foreground <see cref="T:System.Drawing.Color"/> of the <c>TextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see cref="F:System.Drawing.Color.Empty"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.BackColor">
            <summary>
            Get the background <see cref="T:System.Drawing.Color"/> of the <c>TextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see cref="F:System.Drawing.Color.Empty"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.HorzAlign">
            <summary>
            Get the vertical alignment associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see cref="F:System.Drawing.StringAlignment.Near"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.VertAlign">
            <summary>
            Get the vertical alignment associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see cref="F:System.Drawing.StringAlignment.Near"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.SpacingAdjustment">
            <summary>
            Get the <see cref="P:UIComponents.TextStyle.SpacingAdjustment"/>
            associated with the <c>ITextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (<see cref="F:System.Drawing.Size.Empty"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Indent">
            <summary>
            Get the left indent (in pixels) for the <c>ITextElement</c>
            </summary>
            <remarks>
            If no <see cref="P:UIComponents.TextElement.TextStyle"/> is associated with this <c>TextElement</c> this 
            property returns the default value (0)
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Prefix">
            <summary>
            Get/Set the Prefix string
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.PrefixProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Text">
            <summary>
            Get/Set the text content string
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.TextProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Image">
            <summary>
            Get/Set a custom <see cref="P:UIComponents.TextElement.Image"/> associated with the <c>TextElement</c>
            </summary>
            <remarks>
            The <c>Image</c> property (if non-<see langword="null"/>) overrides the <see cref="P:UIComponents.TextElement.ImageIndex"/> 
            property in regards to displaying an associated image. 
            <para>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.ImageProperty"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.CustomImage">
            <summary>
            A routine to get the custom <see cref="P:UIComponents.TextElement.Image"/> directly 
            </summary>
        </member>
        <member name="P:UIComponents.TextElement.ImageIndex">
            <summary>
            Get/Set the <c>ImageIndex</c> that maps to the <see cref="P:UIComponents.TextStyle.ImageSet"/>
            defined by the <see cref="P:UIComponents.TextElement.TextStyle"/>
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.OtherProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.TextStyle">
            <summary>
            Get/Set the <see cref="P:UIComponents.TextElement.TextStyle"/> associated with this <c>TextElement</c>
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.StyleProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Visible">
            <summary>
            Get/Set the visibility of this <c>TextElement</c>
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextElement.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.VisibleProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Item(System.String)">
            <summary>
            Get/Set arbitrary properties on the <c>TextElement</c>
            </summary>
            <remarks>
            Can be used to store application context information specific to a <c>TextElement</c>
            <para>
            This mechanism is used by <see cref="T:UIComponents.TextLayoutPanel"/> to store dynamic rectangle 
            information for the layout of the <c>TextElement</c>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextElement.Properties">
            <summary>
            Get the arbitrary properties Hashtable, creating it if necessary
            </summary>
        </member>
        <member name="T:UIComponents.TextStyle">
            <summary>
            Defines the visualization of a <see cref="T:UIComponents.TextElement"/>
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.font">
            <summary>
            Font for the style
            </summary>
            <remarks>
            If <see langword="null"/> then implies use of the "parent" font
            </remarks>
        </member>
        <member name="F:UIComponents.TextStyle.textColor">
            <summary>
            Foreground Color for the style
            </summary>
            <remarks>
            If <see cref="F:System.Drawing.Color.Empty"/> implies use of the "parent" 
            <see cref="P:System.Windows.Forms.Control.ForeColor"/>
            </remarks>
        </member>
        <member name="F:UIComponents.TextStyle.backColor">
            <summary>
            Background Color for the style
            </summary>
            <remarks>
            If <see cref="F:System.Drawing.Color.Empty"/> then implies use of the 
            "parent" <see cref="P:System.Windows.Forms.Control.BackColor"/>
            </remarks>
        </member>
        <member name="F:UIComponents.TextStyle.horzAlignment">
            <summary>
            Horizontal Alignment of the element within its bounding rectangle
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.vertAlignment">
            <summary>
            Vertical Alignment of an element within its bounding rectangle
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.spacingAdjust">
            <summary>
            +/- value to alter default spacing of style of parent
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.imageSet">
            <summary>
            ImageSet associated with the style
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.description">
            <summary>
            A description for the style (not used by code)
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.indent">
            <summary>
            Left indent (in pixels) for the style
            </summary>
        </member>
        <member name="F:UIComponents.TextStyle.propertyChangeListeners">
            <summary>
            <see cref="E:UIComponents.TextStyle.PropertyChange"/>
            </summary>
        </member>
        <member name="M:UIComponents.TextStyle.#ctor">
            <summary>
            Create a <see cref="T:UIComponents.TextStyle"/> with defaults
            </summary>
        </member>
        <member name="M:UIComponents.TextStyle.GetImage(System.Int32)">
            <summary>
            Look up an image given an index
            </summary>
            <param name="index">The index into the <see cref="P:UIComponents.TextStyle.ImageSet"/></param>
            <returns>
            The <see cref="T:System.Drawing.Image"/> or <see langword="null"/> if it cannot be found
            </returns>
        </member>
        <member name="M:UIComponents.TextStyle.OnPropertyChange(UIComponents.TextElementProperty)">
            <summary>
            Fire <see cref="E:UIComponents.TextStyle.PropertyChange"/> events to listeners
            </summary>
            <param name="property"></param>
        </member>
        <member name="E:UIComponents.TextStyle.PropertyChange">
            <summary>
            Register/Unregister for <see cref="E:UIComponents.TextStyle.PropertyChange"/> events
            </summary>
        </member>
        <member name="P:UIComponents.TextStyle.Description">
            <summary>
            Just a description string. Might be helpful if you have 50 of these things
            </summary>
            <remarks>
            This property has no effect on functionality
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.Font">
            <summary>
            Get/Set the <see cref="T:System.Drawing.Font"/> for the <c>TextStyle</c>
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.FontProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.TextColor">
            <summary>
            Get/Set the Foreground <see cref="T:System.Drawing.Color"/> of the <c>TextStyle</c> 
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.TextColorProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.BackColor">
            <summary>
            Get/Set the Background <see cref="T:System.Drawing.Color"/> of the <c>TextStyle</c> 
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.BackColorProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.HorzAlign">
            <summary>
            Get/Set the horizontal alignment of the <c>TextStyle</c> 
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.HorizontalAlignmentProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.VertAlign">
            <summary>
            Get/Set the vertical alignment of the <c>TextStyle</c> 
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.VerticalAlignmentProperty"/>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.ImageSet">
            <summary>
            Get/Set the <see cref="P:UIComponents.TextStyle.ImageSet"/> associated with the <c>TextStyle</c>
            </summary>
            <remarks>
            <see cref="P:UIComponents.TextElement.ImageIndex"/> is used to associate a <see cref="T:UIComponents.TextElement"/>
            with an <see cref="T:System.Drawing.Image"/> in the <see cref="P:UIComponents.TextStyle.ImageSet"/>. Note that the <see cref="P:UIComponents.TextElement.Image"/> 
            property can override the <see cref="P:UIComponents.TextElement.ImageIndex"/> property 
            <para>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.ImageSetProperty"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.SpacingAdjustment">
            <summary>
            Get/Set the Y-spacing adjustment for the <c>TextStyle</c> 
            </summary>
            <remarks>
            The <see cref="P:System.Drawing.Size.Width"/> values specifies the +/- offset from the
            proceeding element, while the <see cref="P:System.Drawing.Size.Height"/> specifies the
            +/- offset from the succeeding element
            <para>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.SpacingAdjustmentProperty"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.TextStyle.Indent">
            <summary>
            Number of "pixels" to indent element (from left)
            </summary>
            <remarks>
            Settting this value fires a <see cref="E:UIComponents.TextStyle.PropertyChange"/> <see langword="event"/>
            with the argument of <see cref="F:UIComponents.TextElementProperty.IndentProperty"/>
            </remarks>
        </member>
        <member name="T:UIComponents.BackgroundStyle">
            <summary>
            Enumeration used for various panel types to describe how the
            background should be painted (or not painted)
            </summary>
        </member>
        <member name="F:UIComponents.BackgroundStyle.Transparent">
            <summary>
            No background will be drawn
            </summary>
        </member>
        <member name="F:UIComponents.BackgroundStyle.Solid">
            <summary>
            Background will be drawn using <see cref="P:System.Windows.Forms.Control.BackColor"/>
            </summary>
        </member>
        <member name="F:UIComponents.BackgroundStyle.Gradient">
            <summary>
            Background will be drawn using a gradient defined by the control
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelState">
            <summary>
            Enumeration describing the panel state
            </summary>
            <remarks>
            The panel can be in an inbetween state. <see cref="T:UIComponents.XPPanelDrawState"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanelState.Expanded">
            <summary>
            The <c>XPPanel</c> is expanded
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelState.Collapsed">
            <summary>
            The <c>XPPanel</c> is collapsed
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelDrawState">
            <summary>
            Primarily for internal use. Provides more information
            regarding the <see cref="T:UIComponents.XPPanelState"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelDrawState.Normal">
            <summary>
            <c>XPPanel</c> is not actively changing
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelDrawState.Expanding">
            <summary>
            <c>XPPanel</c> is actively expanding
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelDrawState.Collapsing">
            <summary>
            <c>XPPanel</c> is actively collapsing
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelDrawState.Internal">
            <summary>
            <c>XPPanel</c> is in an internal state
            </summary>
            <remarks>
            This state is primarily used for <i>funky</i> internal states that
            we need to recognize and take special action (or dont act)
            </remarks>
        </member>
        <member name="T:UIComponents.XPPanelProperties">
            <summary>
            Enumeration of all <c>XPPanel</c> properties that trigger
            <see cref="E:UIComponents.XPPanel.PropertyChange"/> events
            </summary>
            <remarks>
            When a property changes, a <see cref="T:UIComponents.XPPanelPropertyChangeEventArgs"/> event is
            fired to listeners. The <see cref="T:System.EventArgs"/> will contain one of the following
            values allowing listeners to react to specific property changes
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CaptionProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.Caption"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CaptionGradientProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CaptionGradient"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CaptionGradientModeProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CaptionGradientMode"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CaptionCornerTypeProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CaptionCornerType"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.GradientOffsetProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.GradientOffset"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CaptionUnderlineProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CaptionUnderline"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.HorzAlignmentProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.HorzAlignment"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.VertAlignmentProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.VertAlignment"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.FontProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.Font"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.TextColorsProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.TextColors"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.TextHighlightColorsProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.TextHighlightColors"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CurveRadiusProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CurveRadius"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.ImageItemsProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.ImageItems"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.ExpandedGlyphsProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.ExpandedGlyphs"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.CollapsedGlyphsProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.CollapsedGlyphs"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.SpacingProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.Spacing"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.FitToImageProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.FitToImage"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.PanelStateProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.PanelState"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.IsFixedHeightProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.IsFixedHeight"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.PanelGradientProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.PanelGradient"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.PanelGradientModeProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.PanelGradientMode"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.PanelOutlineColorProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.OutlineColor"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.EnabledProperty">
            <summary>
            <see cref="P:System.Windows.Forms.Control.Enabled"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.AnimationRateProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.AnimationRate"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.DisabledOpacityProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.DisabledOpacity"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.XPPanelStyleProperty">
            <summary>
            <see cref="P:UIComponents.XPPanel.XPPanelStyle"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelProperties.PanelHeightProperty">
            <summary>
            Minimum panel height (when expanded)
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelStyle">
            <summary>
            Enumeration defining visual style of <c>XPPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelStyle.Custom">
            <summary>
            User defined style
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelStyle.WindowsXP">
            <summary>
            Emulation of WindowsXP Collapsible panel
            </summary>
        </member>
        <member name="T:UIComponents.XPPanel">
            <summary>
            <c>XPPanel</c> - Collapsible Panel ala Windows XP
            </summary>
            <remarks>
            An <c>XPPanel</c> is a control/container based on <see cref="T:System.Windows.Forms.Panel"/>.
            It can be associated with an <see cref="T:UIComponents.XPPanelGroup"/> for automatic grouping/management, or
            it can be placed directly on a <see cref="T:System.Windows.Forms.Form"/>
            <para>
            <c>XPPanel</c> uses a <see cref="T:System.ComponentModel.TypeConverter"/> to allow designer code generation to use the constructor that
            specifies the <see cref="P:UIComponents.XPPanel.ExpandedHeight"/> property.
            </para>
            <para>
            <c>XPPanel</c> has the following primary properties:
            <list type="table">
            	<listheader>
            		<term>Property</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.Caption"/></term>
            		<description>Text displayed in the caption of the <c>XPPanel</c></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.CaptionGradient"/></term>
            		<description><see cref="T:UIComponents.GradientColor"/> describing the start/end colors for the <see cref="P:UIComponents.XPPanel.Caption"/>
            		gradient
            		</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.CurveRadius"/></term>
            		<description>The radius of the curver for the rounded corners of the <see cref="P:UIComponents.XPPanel.Caption"/></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.CaptionUnderline"/></term>
            		<description><see cref="T:System.Drawing.Color"/> for the <see cref="P:UIComponents.XPPanel.Caption"/> underline, or <see cref="F:System.Drawing.Color.Empty"/>
            		for no <see cref="P:UIComponents.XPPanel.Caption"/> underline</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.Font"/></term>
            		<description>Font for the <see cref="P:UIComponents.XPPanel.Caption"/> text</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.TextColors"/></term>
            		<description><see cref="T:UIComponents.ColorPair"/> describing the <i>normal</i> foreground/background colors for 
            		the <see cref="P:UIComponents.XPPanel.Caption"/> text
            		</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.TextHighlightColors"/></term>
            		<description><see cref="T:UIComponents.ColorPair"/> describing the foreground/background colors for the 
            		<see cref="P:UIComponents.XPPanel.Caption"/> text when it is <i>hot/highlighted</i> (mouse over)
            		</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.HorzAlignment"/></term>
            		<description>Horizontal alignment of <see cref="P:UIComponents.XPPanel.Caption"/> text (see <see cref="T:System.Drawing.StringAlignment"/>)</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.VertAlignment"/></term>
            		<description>Vertical alignment of <see cref="P:UIComponents.XPPanel.Caption"/> text (see <see cref="T:System.Drawing.StringAlignment"/>)</description>
            	</item>	
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.ImageItems"/></term>
            		<description><see cref="T:UIComponents.StateImageItems"/> describing the <see cref="T:UIComponents.ImageSet"/> and index mappings for
            		the <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and <c>Disabled</c> images that appear on the
            		left of the <see cref="P:UIComponents.XPPanel.Caption"/></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.CollapsedGlyphs"/></term>
            		<description><see cref="T:UIComponents.StateImageItems"/> describing the <see cref="T:UIComponents.ImageSet"/> and index mappings for
            		the <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and <c>Disabled</c> images that appear on the
            		right of the <see cref="P:UIComponents.XPPanel.Caption"/> when the <see cref="P:UIComponents.XPPanel.PanelState"/> is <see cref="F:UIComponents.XPPanelState.Collapsed"/></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.ExpandedGlyphs"/></term>
            		<description><see cref="T:UIComponents.StateImageItems"/> describing the <see cref="T:UIComponents.ImageSet"/> and index mappings for
            		the <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and <c>Disabled</c> images that appear on the
            		right of the <see cref="P:UIComponents.XPPanel.Caption"/> when the <see cref="P:UIComponents.XPPanel.PanelState"/> is <see cref="F:UIComponents.XPPanelState.Expanded"/></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.PanelState"/></term>
            		<description>Current state of the <c>XPPanel</c>. <see cref="F:UIComponents.XPPanelState.Expanded"/> or <see cref="F:UIComponents.XPPanelState.Collapsed"/></description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.IsFixedHeight"/></term>
            		<description><see langword="true"/> if the <c>XPPanel</c> cannot be expanded/collapsed</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.PanelGradient"/></term>
            		<description><see cref="T:UIComponents.GradientColor"/> describing the start/end colors for the panel gradient</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.OutlineColor"/></term>
            		<description><see cref="T:System.Drawing.Color"/> of the panel outline, or <see cref="F:System.Drawing.Color.Empty"/> for no outline</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.AnimationRate"/></term>
            		<description>The animation rate in milliseconds (or 0 for no animation)</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanel.XPPanelStyle"/></term>
            		<description>Set the style of the <c>XPPanel</c> - <see cref="F:UIComponents.XPPanelStyle.Custom"/> or 
            		<see cref="F:UIComponents.XPPanelStyle.WindowsXP"/></description>
            	</item>
            </list>
            </para>
            <para>
            <c>XPPanelGroup</c> has the following primary events:
            <list type="table">
            	<listheader>
            		<term>Event</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="E:UIComponents.XPPanel.PropertyChange"/></term>
            		<description>Triggered when a primary property changes. See <see cref="T:UIComponents.XPPanelProperties"/></description>
            	</item>
            	<item>
            		<term><see cref="E:UIComponents.XPPanel.PanelStateChange"/></term>
            		<description>Triggered when the <c>XPPanel</c> expands/collapses</description>
            	</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.MinCaptionHeight">
            <summary>
            Reasonable minimum height for the caption
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultSpacing">
            <summary>
            Default margins/spacing for the <c>XPPanel</c> caption
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultCaptionGradientStart">
            <summary>
            Default gradient start <see cref="T:System.Drawing.Color"/> for the <see cref="P:UIComponents.XPPanel.Caption"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultCaptionGradientEnd">
            <summary>
            Default gradient end <see cref="T:System.Drawing.Color"/> for the <see cref="P:UIComponents.XPPanel.Caption"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultCaptionGradient">
            <summary>
            GradientColor describing the default caption gradient
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultPanelGradientStart">
            <summary>
            Default gradient start <see cref="T:System.Drawing.Color"/> for the panel
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultPanelGradientEnd">
            <summary>
            Default gradient end <see cref="T:System.Drawing.Color"/> for the panel
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultPanelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> describing the default panel gradient
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultTextColor">
            <summary>
            Default foreground <see cref="T:System.Drawing.Color"/> for <see cref="P:UIComponents.XPPanel.Caption"/> text in the <i>normal</i> state
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultTextColors">
            <summary>
            <see cref="T:UIComponents.ColorPair"/> describing the default foreground/background <see cref="T:System.Drawing.Color"/> for <i>normal</i>
            <see cref="P:UIComponents.XPPanel.Caption"/> text
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultTextHighlightColor">
            <summary>
            Default foreground <see cref="T:System.Drawing.Color"/> for <see cref="P:UIComponents.XPPanel.Caption"/> text in the <i>hot/highlight</i> state
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultTextHighlightColors">
            <summary>
            <see cref="T:UIComponents.ColorPair"/> describing the default foreground/background <see cref="T:System.Drawing.Color"/> for <i>hot/highlight</i>
            <see cref="P:UIComponents.XPPanel.Caption"/> text
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultCaptionUnderlineColor">
            <summary>
            Default <see cref="T:System.Drawing.Color"/> of the <see cref="P:UIComponents.XPPanel.Caption"/> underline
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no underline
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.DefaultOutlineColor">
            <summary>
            Default <see cref="T:System.Drawing.Color"/> of the panel outline
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no outline
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.grayScaleAttributes">
            <summary>
            Standard gray-scale conversion for images
            </summary>
            <remarks>
            This is a very generic definition and is defined as <see langword="state"/> so
            that it can be shared by all instances of <c>XPPanel</c>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.xpStyleExpandGlyphs">
            <summary>
            Windows XP style expand glyphs state image mapping
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.xpStyleCollapseGlyphs">
            <summary>
            Windows XP style collapse glyphs state image mapping
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.LoadBitmap(System.String)">
            <summary>
            Used to load bitmap resources from the <c>XPPanel</c> assembly
            </summary>
            <param name="resource">The name of the resource</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> resource
            </returns>
        </member>
        <member name="F:UIComponents.XPPanel.components">
            <summary>
            Standard Windows Forms container
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.animationTimer">
            <summary>
            Timer used for expand/collapse animation
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.AnimationRate"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.panelState">
            <summary>
            Tracks the current <see cref="T:UIComponents.XPPanelState"/>of the panel
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.PanelState"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.text">
            <summary>
            The text for the <see cref="P:UIComponents.XPPanel.Caption"/> of the XPPanel
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.Caption"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.horzAlignment">
            <summary>
            Horizontal alignment of <see cref="P:UIComponents.XPPanel.Caption"/> text
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.HorzAlignment"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.vertAlignment">
            <summary>
            Vertical alignment of <see cref="P:UIComponents.XPPanel.Caption"/> text
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.VertAlignment"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.font">
            <summary>
            Font used to draw the <see cref="P:UIComponents.XPPanel.Caption"/>
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.Font"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.textColors">
            <summary>
            Normal <see cref="T:UIComponents.ColorPair"/> of the <see cref="P:UIComponents.XPPanel.Caption"/> text 
            </summary>
            <remarks>
            A <see cref="T:UIComponents.ColorPair"/> describes both the foreground and background colors
            <para>
            See <see cref="P:UIComponents.XPPanel.TextColors"/>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.textHighlightColors">
            <summary>
            Highlight <see cref="T:UIComponents.ColorPair"/> of the <see cref="P:UIComponents.XPPanel.Caption"/> text (foreground and background)
            </summary>
            <remarks>
            A <see cref="T:UIComponents.ColorPair"/> describes both the foreground and background colors
            <para>
            See <see cref="P:UIComponents.XPPanel.TextHighlightColors"/>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.captionGradient">
            <summary>
            Encapsulates the start and end colors for the caption gradient
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.captionUnderline">
            <summary>
            <see cref="T:System.Drawing.Color"/> of the accent line beneath the caption
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no underline
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.captionCurveRadius">
            <summary>
            Curve Radius for XPPanel Caption
            </summary>
            <remarks>
            Controls the degree of the arc for the rounded corners of the caption.
            <para>
            Set to zero (0) for no rounding (square)
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.captionCornerType">
            <summary>
            Where the caption corner's are rounded
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.captionGradientMode">
            <summary>
            Direction of the linear gradient of the Caption
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.imageItems">
            <summary>
            Defines the image index mappings for each Image state
            (normal,highlight,pressed,disabled)
            </summary>
            <remarks>
            <c>ImageItems</c> specifies the images that appear on the
            left-side of the caption of the <c>XPPanel</c>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.animationRate">
            <summary>
            Initial animation rate in milliseconds for expanding/collapsing
            </summary>
            <remarks>
            The initial animation rate. The rate of expand/collapse increases
            with each interval to produce the effect of acceleration.
            
            <para>Set to zero (0) for no animation</para>
            <para>See <see cref="P:UIComponents.XPPanel.AnimationRate"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.glyphImageItemsExpanded">
            <summary>
            Defines the image index mappings for each glyph image state
            (normal,highlight,pressed,disabled) when <see cref="F:UIComponents.XPPanelState.Expanded"/>
            </summary>
            <remarks>
            Glyphs specify the images that appear on the right-side of the <c>XPPanel</c>
            caption
            <para>See <see cref="P:UIComponents.XPPanel.ExpandedGlyphs"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.glyphImageItemsCollapsed">
            <summary>
            Defines the image index mappings for each glyph image state
            (normal,highlight,pressed,disabled) when <see cref="F:UIComponents.XPPanelState.Collapsed"/>
            </summary>
            <remarks>
            Glyphs specify the images that appear on the right-side of the <c>XPPanel</c>
            caption
            <para>See <see cref="P:UIComponents.XPPanel.CollapsedGlyphs"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.spacing">
            <summary>
            Defines the X and Y margins for the left/right and top/bottom
            </summary>
            <remarks>
            Controls the spacing between the edges of the caption and items
            in the caption. Also controls the inter-item spacing that seperates
            caption items from each other
            <para>
            See <see cref="P:UIComponents.XPPanel.Spacing"/>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.isFitToImage">
            <summary>
            <see langword="true"/> if we want to fit the caption to the size of the image
            </summary>
            <remarks>
            Only useful when the height of the image is larger than the best height for the
            caption. In this case, the height of the caption is forced to be the size of the
            image.
            <para>See <see cref="P:UIComponents.XPPanel.FitToImage"/></para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.isFixedHeight">
            <summary>
            <see langword="true"/> if the panel cannot be collapsed
            </summary>
            <remarks>
            See <see cref="P:UIComponents.XPPanel.IsFixedHeight"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.gradientOffset">
            <summary>
            Offset for the start of the caption gradient expressed
            in terms of %. 
            </summary>
            <remarks>
            0 or 100 means no offset, .4 means gradient starts 40% 
            from the left edge of the caption
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.panelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> used for graident background of the panel
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelGradientMode">
            <summary>
            Direction of the linear gradient of the Panel
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelOutlineColor">
            <summary>
            <see cref="T:System.Drawing.Color"/> of the panel outline
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no panel outline
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.disabledOpacity">
            <summary>
            Changes the transparency of an <c>XPPanel</c> when in the disabled state
            </summary>
            <remarks>
            The default is no transparency
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.xpPanelStyle">
            <summary>
            Style of the XPPanel
            </summary>
            <remarks>
            Default is custom
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.propertyChangeListeners">
            <summary>
            <see cref="E:UIComponents.XPPanel.PropertyChange"/> event listeners
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelStateChangeListeners">
            <summary>
            <see cref="E:UIComponents.XPPanel.PanelStateChange"/> event listeners
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelExpandedListeners">
            <summary>
            See <see cref="E:UIComponents.XPPanel.Expanded"/> event
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelExpandingListeners">
            <summary>
            See <see cref="E:UIComponents.XPPanel.Expanding"/> event
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelCollapsedListeners">
            <summary>
            See <see cref="E:UIComponents.XPPanel.Collapsed"/> event
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelCollapsingListeners">
            <summary>
            See <see cref="E:UIComponents.XPPanel.Collapsing"/> event
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.disabledFont">
            <summary>
            <see cref="P:UIComponents.XPPanel.Font"/> used to draw caption text when <c>XPPanel</c> is disabled
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.captionBrush">
            <summary>
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> for the full caption area of <c>XPPanel</c> 
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.captionPath">
            <summary>
            Cached <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for the full caption area of <c>XPPanel</c> 
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.fontBrush">
            <summary>
            <see cref="T:System.Drawing.SolidBrush"/> used to draw the caption text in the selected text foreground color
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.fontHighlightBrush">
            <summary>
            <see cref="T:System.Drawing.SolidBrush"/> used to draw the caption text in the selected text highlight foreground color
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.captionUnderlinePen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the caption underline
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.measureTextFormat">
            <summary>
            <see cref="T:System.Drawing.StringFormat"/> used to measure caption text extents
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.drawTextFormat">
            <summary>
            <see cref="T:System.Drawing.StringFormat"/> used to draw caption text
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.panelBrush">
            <summary>
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> used to paint the panel area
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.isLayoutDirty">
            <summary>
            <see langword="true"/> if a property change has invalidated the
            cached layout of the <c>XPPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.expandedHeight">
            <summary>
            Internal to track the height of the panel when expanded. We need to remember this because
            we whack the height when the panel is collapsed.
            </summary>
            <remarks>
            <c>XPPanel</c> uses a <see cref="T:System.ComponentModel.TypeConverter"/> to pass this value to the <c>XPPanel</c> 
            constructor code is generated
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.panelHeight">
            <summary>
            Minimum size of panel when expanded
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.imageRect">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> describing the image on the left side of the caption
            </summary>
            <remarks>
            The "origin" is generally left at 0,0 and the appropriate offset is applied during
            drawing
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.glyphRect">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> describing the image on the right side of the caption
            </summary>
            <remarks>
            The "origin" is generally left at 0,0 and the appropriate offset is applied during
            drawing
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.textRect">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> describing the image on the left side of the caption
            </summary>
            <remarks>
            The "origin" is generally left at 0,0 and the appropriate offset is applied during
            drawing
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.xpCaptionRect">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> describing the entire caption area of the <c>XPPanel</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.xpPanelRect">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> describing the entire panel area (excluding the caption)
            </summary>
        </member>
        <member name="F:UIComponents.XPPanel.isCaptionHot">
            <summary>
            <see langword="true"/> if the mouse is over the caption
            </summary>
            <remarks>
            Can be <see langword="true"/> when <see cref="F:UIComponents.XPPanel.isCaptionPressed"/> is <see langword="true"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.isCaptionPressed">
            <summary>
            <see langword="true"/> if the mouse is *down* over the caption
            </summary>
            <remarks>
            If <see langword="true"/>, <see cref="F:UIComponents.XPPanel.isCaptionHot"/> is also <see langword="true"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanel.panelDrawState">
            <summary>
            Current <see cref="T:UIComponents.XPPanelDrawState"/>
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.#ctor(System.Int32)">
            <summary>
            Construct an <c>XPPanel</c> with the specified <see cref="P:UIComponents.XPPanel.ExpandedHeight"/>
            </summary>
            <param name="expandedHeight"></param>
        </member>
        <member name="M:UIComponents.XPPanel.#ctor">
            <summary>
            Construct an <c>XPPanel</c> with a default <see cref="P:UIComponents.XPPanel.ExpandedHeight"/> of 100 pixels
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.DisposeCachedObjects">
            <summary>
            Sets all cached GDI+ drawing object proeprties to null which
            causes their current value (if any) to be disposed
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeCaption">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetCaption">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeTextColors">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetTextColors">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeTextHighlightColors">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetTextHighlightColors">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeCaptionGradient">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetCaptionGradient">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeCaptionUnderline">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetCaptionUnderline">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeImageStates">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetImageStates">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeExpandedGlyphs">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetExpandedGlyphs">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeCollapsedGlyphs">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetCollapsedGlyphs">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializePanelGradient">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetPanelGradient">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeOutlineColor">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetOutlineColor">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.ShouldSerializeSpacing">
            <summary>
            Determine if the property needs to be serialized by the designer during code generation
            </summary>
            <remarks>Called by the IDE</remarks>
            <returns><see langword="true"/> if the property has a non-default value</returns>
        </member>
        <member name="M:UIComponents.XPPanel.ResetSpacing">
            <summary>
            Resets the property value back to its default
            </summary>
            <remarks>
            Called by the IDE
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.TogglePanelState">
            <summary>
            Routine to toggle the state of <c>XPPanel</c> from Expanded to Collapsed
            (or visa-versa)
            </summary>
            <remarks>
            This routine provides a way to trigger the visual animation of
            expanding/collapsing a <c>XPPanel</c>
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.OnPanelStateChange">
            <summary>
            Send a <see cref="E:UIComponents.XPPanel.PanelStateChange"/> to listeners
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.OnPropertyChange(UIComponents.XPPanelProperties)">
            <summary>
            Preprocessor for <see cref="E:UIComponents.XPPanel.PropertyChange"/> events
            </summary>
            <param name="xpPanelProperty">The property that changed</param>
            <remarks>
            Look at each property change and invalidate cached GDI+ objects 
            as necessary.
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.OnPanelExpanding">
            <summary>
            Shim for the <see cref="E:UIComponents.XPPanel.Expanding"/> event
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.OnPanelExpanded">
            <summary>
            Shim for the <see cref="E:UIComponents.XPPanel.Expanded"/> event
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.OnPanelCollapsing">
            <summary>
            Shim for the <see cref="E:UIComponents.XPPanel.Collapsing"/> event
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.OnPanelCollapsed">
            <summary>
            Shim for the <see cref="E:UIComponents.XPPanel.Collapsed"/> event
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.GetStatefulImage(UIComponents.StateImageItems)">
            <summary>
            Get the appropriate image for the current state as defined by the
            specified <see cref="T:UIComponents.StateImageItems"/>
            </summary>
            <param name="imageItems">Images and image state map</param>
            <returns>
            The appropriate image for the state, or the <c>Normal</c> image
            </returns>
        </member>
        <member name="M:UIComponents.XPPanel.GetGlyphStateImageItems">
            <summary>
            Select the appropriate <see cref="T:UIComponents.StateImageItems"/> based on the current
            state of the <c>XPPanel</c>
            </summary>
            <returns>
            The <see cref="T:UIComponents.StateImageItems"/> containing the appropriate glyph images 
            and state mappings
            </returns>
        </member>
        <member name="M:UIComponents.XPPanel.GetGlyphImages">
            <summary>
            Select the appropriate <see cref="T:UIComponents.ImageSet"/> based on the current
            state of the <c>XPPanel</c>
            </summary>
            <returns>
            The <see cref="T:UIComponents.ImageSet"/> containing the appropriate glyph images
            </returns>
        </member>
        <member name="M:UIComponents.XPPanel.GetTextSize(System.Drawing.Graphics,System.Int32)">
            <summary>
            Measure the caption text to establish the <c>vertical extents</c> of its
            bounding box. This way we can use multi-line captions
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object being used</param>
            <param name="width">The horizontal extents/limits</param>
            <returns></returns>
        </member>
        <member name="M:UIComponents.XPPanel.UpdatePanelLayout(System.Drawing.Graphics)">
            <summary>
            Calculate the various rectangles for the caption and caption items
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to use. May be <see langword="null"/></param>
            <remarks>
            At initialization the <see cref="T:System.Drawing.Graphics"/> instance may be null since we need to force an inital
            panel layout. In this case we do <b>not</b> clear the dirty flag
            <para>
            Images (on the left) are clipped to 64x64. Glyphs (on the right) are clipped to 32x32. These
            restrictions are arbitrary. Any image that is larger will be <i>scaled</i> to the max width/height
            </para>
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.DrawCaptionBackground(System.Drawing.Graphics)">
            <summary>
            Draw the caption area (sans items)
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use</param>
        </member>
        <member name="M:UIComponents.XPPanel.DrawCaption(System.Drawing.Graphics)">
            <summary>
            Draw the caption area of the <c>XPPanel</c>
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> for drawing</param>
        </member>
        <member name="M:UIComponents.XPPanel.DrawPanel(System.Drawing.Graphics)">
            <summary>
            Paint the panel portion of the <c>XPPanel</c>
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> object for drawing</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the <c>XPPanel</c>
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="M:UIComponents.XPPanel.OnVisibleChanged(System.EventArgs)">
            <summary>
            Send an <see cref="E:UIComponents.XPPanel.PanelStateChange"/> when the visibility of the
            <c>XPPanel</c> changes
            </summary>
            <param name="e">The event args</param>
        </member>
        <member name="M:UIComponents.XPPanel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Prevent the panel from being inappropriately resized.
            This logic applies when the panel is collapsed (cuz we dont want to allow collapsed panel
            to be resized by/in the designer) as well as for fixed height panel areas (which are required
            to be a specific height and no other.)
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Track the mouse movement so we can draw the caption hot/normal
            </summary>
            <remarks>
            If the <c>XPPanel</c> <see cref="P:UIComponents.XPPanel.IsFixedHeight"/> property is
            <see langword="true"/> then panel is <b>never</b> hot
            </remarks>
            <param name="e">MouseMove args</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse is out of the control
            </summary>
            <param name="e">MouseLeave args</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnSizeChanged(System.EventArgs)">
            <summary>
            Override base.OnSizeChanged
            </summary>
            <param name="e">The OnSizeChanged event args</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse down event
            </summary>
            <param name="e">MouseDown event args</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse up event
            </summary>
            <param name="e">MouseUp args</param>
        </member>
        <member name="M:UIComponents.XPPanel.OnEnabledChanged(System.EventArgs)">
            <summary>
            Handles enable/disable of <c>XPPanel</c>
            </summary>
            <param name="e">Enable event args</param>
        </member>
        <member name="M:UIComponents.XPPanel.StartAnimation">
            <summary>
            Initialize animation values and start the timer
            </summary>
        </member>
        <member name="M:UIComponents.XPPanel.SetColorAlpha(System.Int32,System.Drawing.Color)">
            <summary>
            Set the alpha value (transparency) for a <see cref="T:System.Drawing.Color"/>
            </summary>
            <param name="alpha">The alpha value</param>
            <param name="c">The <see cref="T:System.Drawing.Color"/></param>
            <returns>The color with the alpha modification</returns>
        </member>
        <member name="M:UIComponents.XPPanel.SetControlsVisible">
            <summary>
            Changes the visibility of controls based upon the height of the XPPanel
            </summary>
            <remarks>
            Only used during animation
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanel.SetControlsOpacity(System.Int32)">
            <summary>
            Changes the transparency of controls based upon the height of the XPPanel
            </summary>
            <remarks>
            Only used during animation
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.GrayScaleAttributes">
            <summary>
            Returns the standard grayscale matrix for image transformations
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.XPStyleExpandGlyphs">
            <summary>
            Returns a <see cref="T:UIComponents.StateImageItems"/> for the expand glyphs when using 
            <see cref="F:UIComponents.XPPanelStyle.WindowsXP"/>
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.XPStyleCollapseGlyphs">
            <summary>
            Returns a <see cref="T:UIComponents.StateImageItems"/> for the collapse glyphs when using 
            <see cref="F:UIComponents.XPPanelStyle.WindowsXP"/>
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.XPPanelStyle">
            <summary>
            Get/Set the style for the XPPanel
            </summary>
            <remarks>
            <see cref="F:UIComponents.XPPanelStyle.Custom"/> uses all user-defined settings, while 
            <see cref="F:UIComponents.XPPanelStyle.WindowsXP"/> provides overrides to certain properties
            to provide a <c>WindowsXP</c> look and feel.
            <para>
            Currently, <see cref="F:UIComponents.XPPanelStyle.WindowsXP"/>, overrides user-specified values
            for <see cref="P:UIComponents.XPPanel.ExpandedGlyphs"/> and <see cref="P:UIComponents.XPPanel.CollapsedGlyphs"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.AnimationRate">
            <summary>
            Get/Set the initial animation rate for expand/collapse
            </summary>
            <remarks>
            The animation rate increases on each interval to provide an acceleration effect
            <para>Set to zero (0) for no animation</para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.AnimationRateProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.DisabledOpacity">
            <summary>
            Get/Set the transparency of the <c>XPPanel</c> when disabled
            </summary>
            <remarks>
            The default value is 255 (no transparency). Decrease towards zero to
            cause transparency effect
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.DisabledOpacityProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.PanelState">
            <summary>
            Get/Set the panel state
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.PanelStateProperty"/> argument</para>
            <para>Fires a PanelStateChange event w/ <see cref="F:System.EventArgs.Empty"/> arguments</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.IsFixedHeight">
            <summary>
            <see langword="true"/> if the panel is always expanded and
            cannot be collapsed
            </summary>
            <remarks>
            Glyph images are <b>not</b> drawn when the <c>XPPanel</c> is fixed
            <para>The default value for this property is <see langword="false"/></para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.IsFixedHeightProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.Caption">
            <summary>
            The caption text for the <c>XPPanel</c>
            </summary>
            <remarks>
            Similar to the <see cref="P:UIComponents.XPPanel.Font"/> property, we could use the base class text property.
            <para>The default value for this property is <see cref="F:System.String.Empty"/></para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.CaptionProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.Font">
            <summary>
            The <see cref="P:UIComponents.XPPanel.Font"/> for the caption text
            </summary>
            <remarks>
            There is no real reason to override this Property. It is an artifact of my
            initial thinking. If removed adjustments would need to be made to
            detect font changes so the property change event can be fired. As an alternative, 
            override property but dont define a <see cref="P:UIComponents.XPPanel.Font"/> field and just use <c>base.Font</c>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.FontProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.TextColors">
            <summary>
            <see cref="T:UIComponents.ColorPair"/> describing the foreground/background colors for the
            caption text in a <i>normal</i> state
            </summary>
            <remarks>
            Currently, the background color value is ignored (i.e., never used) and always
            <see cref="F:System.Drawing.Color.Empty"/>.
            Also, we do not map the text foreground color to the base.Foreground property
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.TextColorsProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.TextHighlightColors">
            <summary>
            <see cref="T:UIComponents.ColorPair"/> describing the foreground/background colors for the
            caption text when in a <i>hot/highlight</i> state (mouse over)
            </summary>
            <remarks>
            Currently, the background color value is ignored (i.e., never used) and always
            <see cref="F:System.Drawing.Color.Empty"/>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.TextHighlightColorsProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.CaptionGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> describing the gradient colors of the
            caption
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.CaptionGradientProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.CaptionUnderline">
            <summary>
            The <see cref="T:System.Drawing.Color"/> used to draw the caption underline
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no underline
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.CaptionUnderlineProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.HorzAlignment">
            <summary>
            The horizontal alignment of the caption text
            </summary>
            <remarks>
            Uses the standard <see cref="T:System.Drawing.StringAlignment"/> values that abstract right-to-left
            left-to-right semnatics
            <para>Default value is <see cref="F:System.Drawing.StringAlignment.Near"/></para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.HorzAlignmentProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.VertAlignment">
            <summary>
            The vertical alignment of the caption text
            </summary>
            <remarks>
            Uses the standard <see cref="T:System.Drawing.StringAlignment"/> values that abstract right-to-left
            left-to-right semnatics
            <para>Default value is <see cref="F:System.Drawing.StringAlignment.Near"/></para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.VertAlignmentProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.ImageItems">
            <summary>
            Describes images that appear on the left side of the caption
            </summary>
            <remarks>
            <see cref="T:UIComponents.StateImageItems"/> which encapsulates an <see cref="T:UIComponents.ImageSet"/> and
            image mappings for the states <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and
            <c>Disabled</c>
            <para>It is important that the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"/> attribute be
            set to <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Content"/> for proper code generation
            in InitializeComponent()</para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.ImageItemsProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.ExpandedGlyphs">
            <summary>
            Describes images that appear on the right side of the caption when the
            <c>XPPanel</c> is <see cref="F:UIComponents.XPPanelState.Expanded"/>
            </summary>
            <remarks>
            <see cref="T:UIComponents.StateImageItems"/> which encapsulates an <see cref="T:UIComponents.ImageSet"/> and
            image mappings for the states <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and
            <c>Disabled</c>
            <para>It is important that the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"/> attribute be
            set to <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Content"/> for proper code generation
            in InitializeComponent()</para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.ExpandedGlyphsProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.CollapsedGlyphs">
            <summary>
            Describes images that appear on the right side of the caption when the
            <c>XPPanel</c> is <see cref="F:UIComponents.XPPanelState.Collapsed"/>
            </summary>
            <remarks>
            <see cref="T:UIComponents.StateImageItems"/> which encapsulates an <see cref="T:UIComponents.ImageSet"/> and
            image mappings for the states <c>Normal</c>, <c>Highlight</c>, <c>Pressed</c>, and
            <c>Disabled</c>
            <para>It is important that the <see cref="T:System.ComponentModel.DesignerSerializationVisibility"/> attribute be
            set to <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Content"/> for proper code generation
            in InitializeComponent()</para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.CollapsedGlyphsProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.CurveRadius">
            <summary>
            Defines the readius of the rounded corners on the caption
            </summary>
            <remarks>
            Default value is 7
            <para>Set to zero (0) for square corners</para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.CurveRadiusProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.GradientOffset">
            <summary>
            Describes the starting point (as a percentage) for the gradient of the caption
            </summary>
            <remarks>
            When set to a value &gt; 0.0 and &lt; 1.0 the gradient does not
            begin until the appropriate relative position. The initial part of
            the caption is drawn using (a <see cref="T:System.Drawing.SolidBrush"/>) with the start 
            <see cref="T:System.Drawing.Color"/> of the <see cref="T:UIComponents.GradientColor"/> property.
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.GradientOffsetProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.PanelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> describing the gradient colors of the panel
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.PanelGradientProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.OutlineColor">
            <summary>
            The <see cref="T:System.Drawing.Color"/> used to draw the panel outline
            </summary>
            <remarks>
            Set to <see cref="F:System.Drawing.Color.Empty"/> for no panel outline
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.PanelOutlineColorProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.ExpandedHeight">
            <summary>
            The <see cref="P:System.Windows.Forms.Control.Height"/> of the <c>XPPanel</c> when expanded
            </summary>
            <remarks>
            This value needs to be remembered because we <b>whack</b> the height when
            it is collapsed. When to remember it is the <i>tricky</i> part
            <para>At various points we try to force the ExpandedHeight to be
            serialized so we have to protect ourselves from infinite recursion</para>
            <para>We dont want the designer to serialize this property because
            the <c>XPPanel</c> uses a <see cref="T:System.ComponentModel.TypeConverter"/> to create
            code that initializes this value through a constructor</para>
            <para>Note that this property does not play the OnPropertyChange game</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.PanelHeight">
            <summary>
            Get/Set the fixed height of the panel area
            </summary>
            <remarks>
            Setting this property to value &gt; 0 causes the height of the panel area to be
            be a contstant value when expanded. This is useful for dynamic content which 
            needs to control the available panel area regardless of the portion taken
            by the caption. This value can be set in the designer, in which case the panel will
            not resize (at all!)
            <para>
            If the layout of the <c>XPPanel</c> is not up-to-date it is updated
            </para>
            <para>
            If the <c>XPPanel</c> is not animating, and currently expanded the height is adjusted
            immediately, otherwise the height change is reflected via <see cref="P:UIComponents.XPPanel.ExpandedHeight"/>
            and will take effect at an appropriate future time
            </para>
            <para>
            This method fires the <see cref="E:UIComponents.XPPanel.PropertyChange"/> event with an argument
            of <see cref="F:UIComponents.XPPanelProperties.PanelHeightProperty"/>
            </para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.PanelRect">
            <summary>
            Returns the current dimensions of the Panel
            </summary>
            <remarks>If the Layout of the <c>XPPanel</c> is not upto date, it is updated</remarks>
        </member>
        <member name="P:UIComponents.XPPanel.Spacing">
            <summary>
            Get/Set the margin/spacing values for items in the caption
            </summary>
            <remarks>
            The X value defines the left/right margin from the caption borders, as
            well as the inter-item spacing. The Y value provides the
            margins from the top/bottom of the caption borders but has no effect
            on inter-item spacing
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.SpacingProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.FitToImage">
            <summary>
            Forces the height of the caption to be &gt;= the height of the <see cref="P:UIComponents.XPPanel.ImageItems"/>
            </summary>
            <remarks>
            The default value is <see langword="false"/>
            <para>
            This property can be used to prevent an image from extending above the caption header when
            the image is taller than best caption height. Otherwise it has no effect
            </para>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelProperties.FitToImageProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.BorderStyle">
            <summary>
            Overridden to supress the user/designer from changing the border style
            </summary>
            <remarks>
            Do not display this property in the browse as it should be a constant
            value (<see cref="F:System.Windows.Forms.BorderStyle.None"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.BackColor">
            <summary>
            Overridden to supress the user/designer from changing the background color
            </summary>
            <remarks>
            Do not display this property in the browse as it should be a constant
            value (<see cref="P:System.Drawing.Color.Transparent"/>)
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.ForeColor">
            <summary>
            Overridden to supress the user/designer from changing the foreground color
            </summary>
            <remarks>
            Do not display this property in the browser as it has no meaning
            See <see cref="P:UIComponents.XPPanel.TextColors"/> for setting the color of the caption text
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.FullCaptionRect">
            <summary>
            Get the full catpion rect which is the entire area of the
            caption, not just the <see cref="F:UIComponents.XPPanel.xpCaptionRect"/>
            </summary>
            <remarks>
            This rectangle includes any portion of the caption that extends
            above the actual caption area (such as the top of an image)
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.CaptionBrush">
            <summary>
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> used to draw the caption background
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.CaptionUnderlinePen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the caption underline
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.PanelBrush">
            <summary>
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> used to draw the panel background
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.CaptionPath">
            <summary>
            Defines the outline of the caption area when <see cref="P:UIComponents.XPPanel.GradientOffset"/> is 0.0 or 1.0
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.DisabledFont">
            <summary>
            <see cref="P:UIComponents.XPPanel.Font"/> used to draw the <see cref="P:UIComponents.XPPanel.Caption"/> when the <c>XPPanel</c> is disabled
            </summary>
            <remarks>
            Normal caption font is <b>FontStyle.Bold</b>. Disabled font is <c>FontStyle.Regular</c>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.FontBrush">
            <summary>
            <see cref="T:System.Drawing.SolidBrush"/> used to draw the caption text when <i>normal</i>
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.FontHighlightBrush">
            <summary>
            <see cref="T:System.Drawing.SolidBrush"/> used to draw the caption text when <i>highlighted</i> (mouse over)
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.MeasureTextFormat">
            <summary>
            <see cref="T:System.Drawing.StringFormat"/> used to measure the Y extent of the caption text
            </summary>
            <remarks>
            Respects the user specified horizontal/vertical alignments and
            trims to "..." on word boundaries
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.DrawTextFormat">
            <summary>
            <see cref="T:System.Drawing.StringFormat"/> used to draw caption text
            </summary>
            <remarks>
            Respects the user specified horizontal/vertical alignments and
            trims to "..." on word boundaries
            <para>Use of <see cref="F:System.Drawing.StringFormatFlags.LineLimit"/> prevents
            a partial line from being displayed (vertically)</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanel.IsActive">
            <summary>
            <see true="true"/> if some action is occurring on the panel
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.IsExpanding">
            <summary>
            <see true="true"/> if the panel is expanding
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.IsCollapsing">
            <summary>
            <see true="true"/> if the panel is collapsing
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.IsExpanded">
            <summary>
            <see true="true"/> if <see cref="F:UIComponents.XPPanelState.Expanded"/>
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.IsCollapsed">
            <summary>
            <see true="true"/> if <see cref="F:UIComponents.XPPanelState.Collapsed"/>
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.PropertyChange">
            <summary>
            Register/Remove a PropertyChange listener
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.PanelStateChange">
            <summary>
            Register/Remove a PanelStateChange listener
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.Collapsed">
            <summary>
            Register/Remove a Collapsed event listener
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.Collapsing">
            <summary>
            Register/Remove a Collapsing event listener
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.Expanding">
            <summary>
            Register/Remove a Expanding event listener
            </summary>
        </member>
        <member name="E:UIComponents.XPPanel.Expanded">
            <summary>
            Register/Remove a Expanded event listener
            </summary>
        </member>
        <member name="P:UIComponents.XPPanel.DisplayRectangle">
            <summary>
            Override this so that Docking of child controls will work
            </summary>
        </member>
        <member name="T:UIComponents.PanelPropertyChangeHandler">
            <summary>
            Delegate signature for <see cref="E:UIComponents.XPPanel.PropertyChange"/> events
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelPropertyChangeEventArgs">
            <summary>
            EventArgs for <see cref="E:UIComponents.XPPanel.PropertyChange"/> events
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelPropertyChangeEventArgs.xpPanelProperty">
            <summary>
            The property that changed
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelPropertyChangeEventArgs.#ctor(UIComponents.XPPanelProperties)">
            <summary>
            Create a new <c>XPPanelPropertyChangeArgs</c> with the specified
            property enumeration value
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:UIComponents.XPPanelPropertyChangeEventArgs.XPPanelProperty">
            <summary>
            Get the <see cref="T:UIComponents.XPPanelProperties"/> property that changed
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelGroupProperties">
            <summary>
            Enumeration of <see cref="T:UIComponents.XPPanelGroup"/> properties
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroupProperties.BorderMarginProperty">
            <summary>
            <see cref="P:UIComponents.XPPanelGroup.BorderMargin"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroupProperties.PanelSpacingProperty">
            <summary>
            <see cref="P:UIComponents.XPPanelGroup.PanelSpacing"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroupProperties.PanelGradientProperty">
            <summary>
            <see cref="P:UIComponents.XPPanelGroup.PanelGradient"/>
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelGroup">
            <summary>
            XPPanelGroup provides a container for <see cref="T:UIComponents.XPPanel"/> controls
            </summary>
            <remarks>
            <para>
            <c>XPPanelGroup</c> has the following primary properties:
            <list type="table">
            	<listheader>
            		<term>Property</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="P:UIComponents.XPPanelGroup.BorderMargin"/></term>
            		<description>Controls the Left/Right/Top margins for contained <see cref="T:UIComponents.XPPanel"/> controls</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanelGroup.PanelSpacing"/></term>
            		<description>Controls the Y spacing between <see cref="T:UIComponents.XPPanel"/> controls</description>
            	</item>
            	<item>
            		<term><see cref="P:UIComponents.XPPanelGroup.PanelGradient"/></term>
            		<description>Defines the <see cref="T:UIComponents.GradientColor"/> for the background of the <c>XPPanelGroup</c></description>
            	</item>
            </list>
            </para>
            <para>
            <c>XPPanelGroup</c> has the following primary events:
            <list type="table">
            	<listheader>
            		<term>Event</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="E:UIComponents.XPPanelGroup.PropertyChange"/></term>
            		<description>Triggered when a primary property changes. See <see cref="T:UIComponents.XPPanelGroupProperties"/></description>
            	</item>
            </list>
            </para>
            <para>
            <c>XPPanelGroup</c> has the following primary methods:
            <list type="table">
            	<listheader>
            		<term>Method</term>
            		<description>Purpose</description>
            	</listheader>
            	<item>
            		<term><see cref="M:UIComponents.XPPanelGroup.MovePanel(System.Int32,System.Int32)"/></term>
            		<description>Change the order/position of a panel within the <c>XPPanelGroup</c></description>
            	</item>
            	<item>
            		<term><see cref="M:UIComponents.XPPanelGroup.EnsureVisible(UIComponents.XPPanel)"/></term>
            		<description>Attempt to make an <see cref="T:UIComponents.XPPanel"/> fully visible
            		within the <c>XPPanelGroup</c> </description>
            	</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanelGroup.DefaultSpacing">
            <summary>
            Default value for <see cref="P:UIComponents.XPPanelGroup.PanelSpacing"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.DefaultPanelGradient">
            <summary>
            Default value for <see cref="P:UIComponents.XPPanelGroup.PanelGradient"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.DefaultBorderMargin">
            <summary>
            Default value for <see cref="P:UIComponents.XPPanelGroup.BorderMargin"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.borderMargin">
            <summary>
            Controls left/top/right spacing of <see cref="T:UIComponents.XPPanel"/> controls within the <c>XPPanelGroup</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.panelSpacing">
            <summary>
            Controls the Y spacing between <see cref="T:UIComponents.XPPanel"/> controls within the <c>XPPanelGroup</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.isInitializingComponent">
            <summary>
            <see langword="true"/> when we are in InitializeComponent()
            </summary>
            <remarks>
            <see cref="T:System.ComponentModel.ISupportInitialize"/>
            </remarks>
        </member>
        <member name="F:UIComponents.XPPanelGroup.panelGradient">
            <summary>
            The <see cref="T:UIComponents.GradientColor"/> for the background of the <c>XPPanelGroup</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.panels">
            <summary>
            Collection to hold the <see cref="T:UIComponents.XPPanel"/> controls in the <c>XPPanelGroup</c>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.xpPanelEventHandler">
            <summary>
            Event handler for <see cref="E:UIComponents.XPPanel.PanelStateChange"/>
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.propertyChangeListeners">
            <summary>
            PropertyChange event listeners
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.#ctor">
            <summary>
            Construct an <c>XPPanelGroup</c>
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.ShouldSerializeBorderMargin">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.XPPanelGroup.ResetBorderMargin">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanelGroup.ShouldSerializePanelGradient">
            <summary>
            Determine if this property should be serialized
            </summary>
            <returns>
            <see langword="true"/> if the proeprty does not equal the default value
            </returns>
        </member>
        <member name="M:UIComponents.XPPanelGroup.ResetPanelGradient">
            <summary>
            Reset the property to its default value
            </summary>
            <remarks>
            Called by the IDE designer
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanelGroup.MovePanel(System.Int32,System.Int32)">
            <summary>
            Change the order/position of an <see cref="T:UIComponents.XPPanel"/> 
            </summary>
            <param name="currIndex">The current index/position</param>
            <param name="newIndex">The new index/position</param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.MovePanel(System.Int32,UIComponents.XPPanel)">
            <summary>
            Change the order/position of the specified <see cref="T:UIComponents.XPPanel"/> 
            </summary>
            <param name="newIndex">The new index/position</param>
            <param name="xpPanel">The <see cref="T:UIComponents.XPPanel"/> to move</param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.EnsureVisible(UIComponents.XPPanel)">
            <summary>
            Ensure that the specified panel is fully visible (if possible) within 
            the <c>XPPanelGroup</c>
            </summary>
            <param name="xpPanel">The <see cref="T:UIComponents.XPPanel"/> to make visible</param>
            <remarks>
            If the panel is not visible it is made visible. If the bottom of the panel
            not visible, the group is scrolled to make it visible, otherwise if the
            top of the panel is not visible the scroll is adjusted to make it visible
            </remarks>
            <exception cref="T:System.ArgumentException">If the specified <see cref="T:UIComponents.XPPanel"/> is not
            a member of the <c>XPPanelGroup</c></exception>
        </member>
        <member name="M:UIComponents.XPPanelGroup.OnPropertyChange(UIComponents.XPPanelGroupProperties)">
            <summary>
            React to property changes and invoke PropertyChange event to listeners
            </summary>
            <param name="property">The property that changed</param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.UpdatePanel(UIComponents.XPPanel,System.Int32)">
            <summary>
            Update an individual <see cref="T:UIComponents.XPPanel"/>
            </summary>
            <param name="panel">The panel to be updated</param>
            <param name="lastBottom">Bottom position of last <see cref="T:UIComponents.XPPanel"/> or 0 if this is the 1st panel
            in the <c>XPPanelGroup</c></param>
        </member>
        <member name="F:UIComponents.XPPanelGroup.updatingPanels">
            <summary>
            Flag to avoid reentrancy (just a waste of cpu cycles)
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.UpdatePanels">
            <summary>
            Update the location and width of all the <see cref="T:UIComponents.XPPanel"/> controls
            in the <see cref="T:UIComponents.XPPanelGroup"/>
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.UpdatePanelsAfter(UIComponents.XPPanel)">
            <summary>
            Update the location of all the <see cref="T:UIComponents.XPPanel"/> controls
            in the <see cref="T:UIComponents.XPPanelGroup"/> after a particular index
            </summary>
            <remarks>
            Used when a panel is collapsed or expanded to change all the
            subsequent panels
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanelGroup.BeginInit">
            <summary>
            Set flag noting that we are in InitializeComponent()
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.EndInit">
            <summary>
            Clear flag noting that we are in InitializeComponent()
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden to handle the addition of <see cref="T:UIComponents.XPPanel"/> items
            specially
            </summary>
            <param name="e">ControlAdded event args</param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden to provide special handling for <see cref="T:UIComponents.XPPanel"/> controls
            </summary>
            <param name="e">ControlRemoved event args</param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the background of the <c>XPPanelGroup</c> using the gradient color for the panel
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.OnSizeChanged(System.EventArgs)">
            <summary>
            Our size changed, relocate all panels
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.XPPanelGroup_PanelStateChange(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:UIComponents.XPPanel.PanelStateChange"/> event handler
            </summary>
            <param name="sender">The <see cref="T:UIComponents.XPPanel"/> that changed</param>
            <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.Control_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle panel/control visibility changes
            </summary>
            <param name="sender">The control whose visibility changed</param>
            <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
        </member>
        <member name="M:UIComponents.XPPanelGroup.XPPanelGroup_Expanded(System.Object,System.EventArgs)">
            <summary>
            Handle the <see cref="E:UIComponents.XPPanel.Expanded"/> event so that the entire panel can
            be made visible
            </summary>
            <param name="sender">The <see cref="T:UIComponents.XPPanel"/> that is expanded</param>
            <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
            <remarks>
            Generally this event is triggered when the caption of the <see cref="T:UIComponents.XPPanel"/>
            is clicked, or a programattic action triggers expansion
            </remarks>
        </member>
        <member name="M:UIComponents.XPPanelGroup.XPPanelGroup_PropertyChange(UIComponents.XPPanel,UIComponents.XPPanelPropertyChangeEventArgs)">
            <summary>
            Handle the <see cref="E:UIComponents.XPPanel.PropertyChange"/> event 
            </summary>
            <param name="xpPanel">The <see cref="T:UIComponents.XPPanel"/> whose property changed</param>
            <param name="e">instance of <see cref="T:UIComponents.XPPanelPropertyChangeEventArgs"/> describing the property change</param>
            <remarks>
            Currently we handle the <see cref="F:UIComponents.XPPanelProperties.PanelHeightProperty"/> so that we can
            ensure that the entire panel is visible. The <see cref="F:UIComponents.XPPanelProperties.PanelHeightProperty"/>
            is only changed when a <see cref="T:UIComponents.XPPanel"/> resizes due to a change in the size of child 
            controls. Typically this indicates some interest/focus on the users part, but you may want to
            supress this event if these changes are 'randomesque' in your application
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanelGroup.BorderMargin">
            <summary>
            Sets the left/right/top margins for <see cref="T:UIComponents.XPPanel"/> controls within the <c>XPPanelGroup</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelGroupProperties.BorderMarginProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanelGroup.PanelSpacing">
            <summary>
            Y spacing between <see cref="T:UIComponents.XPPanel"/> controls within the <c>XPPanelGroup</c>
            </summary>
            <remarks>
            Default value for this property is <see cref="F:UIComponents.XPPanelGroup.DefaultSpacing"/>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelGroupProperties.PanelSpacingProperty"/> argument</para>
            </remarks>
        </member>
        <member name="P:UIComponents.XPPanelGroup.PanelGradient">
            <summary>
            <see cref="T:UIComponents.GradientColor"/> used to draw the background of the <c>XPPanelGroup</c>
            </summary>
            <remarks>
            <para>Fires a PropertyChange event w/ <see cref="F:UIComponents.XPPanelGroupProperties.PanelGradientProperty"/> argument</para>
            </remarks>
        </member>
        <member name="E:UIComponents.XPPanelGroup.PropertyChange">
            <summary>
            Add/Remove a PropertyChange listener
            </summary>
        </member>
        <member name="P:UIComponents.XPPanelGroup.AutoScroll">
            <summary>
            Provide a version of <see cref="P:System.Windows.Forms.ScrollableControl.AutoScroll"/> that hides the base class
            version
            </summary>
        </member>
        <member name="P:UIComponents.XPPanelGroup.BackColor">
            <summary>
            Provide a version of <see cref="P:System.Windows.Forms.Control.BackColor"/>that hides the base class
            version
            </summary>
        </member>
        <member name="T:UIComponents.XPPanelGroup.PropertyChangeEventArgs">
            <summary>
            <see cref="E:UIComponents.XPPanelGroup.PropertyChange"/> event arguments
            </summary>
        </member>
        <member name="F:UIComponents.XPPanelGroup.PropertyChangeEventArgs.property">
            <summary>
            The enumeration for the property that changed
            </summary>
        </member>
        <member name="M:UIComponents.XPPanelGroup.PropertyChangeEventArgs.#ctor(UIComponents.XPPanelGroupProperties)">
            <summary>
            Create a <c>PropertyChangeEventArgs</c>
            </summary>
            <param name="property">The enumeration for the property that changed</param>
        </member>
        <member name="P:UIComponents.XPPanelGroup.PropertyChangeEventArgs.Property">
            <summary>
            Get the enumeration for the property that changed
            </summary>
        </member>
        <member name="T:UIComponents.Designers.XPPanelTypeConverter">
            <summary>
            XPPanelTypeConverter provides an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> used
            for designer code generation. This allows an alternate constructor to
            be used that allows the value of <see cref="P:UIComponents.XPPanel.ExpandedHeight"/> to
            be specified prior to other properties (such as <see cref="P:System.Windows.Forms.Control.Size"/>)
            which could interfere with correct sizing
            </summary>
        </member>
        <member name="M:UIComponents.Designers.XPPanelTypeConverter.#ctor">
            <summary>
            Create an <c>XPPanelTypeConverter</c>
            </summary>
        </member>
        <member name="M:UIComponents.Designers.XPPanelTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Signal that we can convert to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> (if asked...)
            </summary>
            <param name="context">designer context</param>
            <param name="destinationType">Target type</param>
            <returns>
            <see langword="true"/> if the designer asks for an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>,
            otherwise whatever the base class says
            </returns>
        </member>
        <member name="M:UIComponents.Designers.XPPanelTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to an <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> if requested
            </summary>
            <param name="context">designer context</param>
            <param name="culture">globalization</param>
            <param name="value">the instance to convert</param>
            <param name="destinationType">The target type</param>
            <returns>
            An <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> if requested, otherwise whatever
            the base class returns
            </returns>
        </member>
    </members>
</doc>
