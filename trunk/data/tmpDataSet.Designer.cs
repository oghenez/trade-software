//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("tmpDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class tmpDS : global::System.Data.DataSet {
        
        private tradeEstimateDataTable tabletradeEstimate;
        
        private portfolioListDataTable tableportfolioList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tmpDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tmpDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tradeEstimate"] != null)) {
                    base.Tables.Add(new tradeEstimateDataTable(ds.Tables["tradeEstimate"]));
                }
                if ((ds.Tables["portfolioList"] != null)) {
                    base.Tables.Add(new portfolioListDataTable(ds.Tables["portfolioList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tradeEstimateDataTable tradeEstimate {
            get {
                return this.tabletradeEstimate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public portfolioListDataTable portfolioList {
            get {
                return this.tableportfolioList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            tmpDS cln = ((tmpDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tradeEstimate"] != null)) {
                    base.Tables.Add(new tradeEstimateDataTable(ds.Tables["tradeEstimate"]));
                }
                if ((ds.Tables["portfolioList"] != null)) {
                    base.Tables.Add(new portfolioListDataTable(ds.Tables["portfolioList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletradeEstimate = ((tradeEstimateDataTable)(base.Tables["tradeEstimate"]));
            if ((initTable == true)) {
                if ((this.tabletradeEstimate != null)) {
                    this.tabletradeEstimate.InitVars();
                }
            }
            this.tableportfolioList = ((portfolioListDataTable)(base.Tables["portfolioList"]));
            if ((initTable == true)) {
                if ((this.tableportfolioList != null)) {
                    this.tableportfolioList.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "tmpDS";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletradeEstimate = new tradeEstimateDataTable();
            base.Tables.Add(this.tabletradeEstimate);
            this.tableportfolioList = new portfolioListDataTable();
            base.Tables.Add(this.tableportfolioList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetradeEstimate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeportfolioList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            tmpDS ds = new tmpDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tradeEstimateRowChangeEventHandler(object sender, tradeEstimateRowChangeEvent e);
        
        public delegate void portfolioListRowChangeEventHandler(object sender, portfolioListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tradeEstimateDataTable : global::System.Data.TypedTableBase<tradeEstimateRow> {
            
            private global::System.Data.DataColumn columnonDate;
            
            private global::System.Data.DataColumn columntradeAction;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columnqty;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnstockQty;
            
            private global::System.Data.DataColumn columncashAmt;
            
            private global::System.Data.DataColumn columnstockAmt;
            
            private global::System.Data.DataColumn columntotalAmt;
            
            private global::System.Data.DataColumn columnrevenue;
            
            private global::System.Data.DataColumn columnfeeAmt;
            
            private global::System.Data.DataColumn columnignored;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateDataTable() {
                this.TableName = "tradeEstimate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tradeEstimateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tradeEstimateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn onDateColumn {
                get {
                    return this.columnonDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tradeActionColumn {
                get {
                    return this.columntradeAction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qtyColumn {
                get {
                    return this.columnqty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stockQtyColumn {
                get {
                    return this.columnstockQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cashAmtColumn {
                get {
                    return this.columncashAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stockAmtColumn {
                get {
                    return this.columnstockAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalAmtColumn {
                get {
                    return this.columntotalAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revenueColumn {
                get {
                    return this.columnrevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn feeAmtColumn {
                get {
                    return this.columnfeeAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ignoredColumn {
                get {
                    return this.columnignored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRow this[int index] {
                get {
                    return ((tradeEstimateRow)(this.Rows[index]));
                }
            }
            
            public event tradeEstimateRowChangeEventHandler tradeEstimateRowChanging;
            
            public event tradeEstimateRowChangeEventHandler tradeEstimateRowChanged;
            
            public event tradeEstimateRowChangeEventHandler tradeEstimateRowDeleting;
            
            public event tradeEstimateRowChangeEventHandler tradeEstimateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtradeEstimateRow(tradeEstimateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRow AddtradeEstimateRow(System.DateTime onDate, string tradeAction, decimal price, decimal qty, decimal amt, decimal stockQty, decimal cashAmt, decimal stockAmt, decimal totalAmt, decimal revenue, decimal feeAmt, bool ignored) {
                tradeEstimateRow rowtradeEstimateRow = ((tradeEstimateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        onDate,
                        tradeAction,
                        price,
                        qty,
                        amt,
                        stockQty,
                        cashAmt,
                        stockAmt,
                        totalAmt,
                        revenue,
                        feeAmt,
                        ignored};
                rowtradeEstimateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtradeEstimateRow);
                return rowtradeEstimateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRow FindByonDate(System.DateTime onDate) {
                return ((tradeEstimateRow)(this.Rows.Find(new object[] {
                            onDate})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tradeEstimateDataTable cln = ((tradeEstimateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tradeEstimateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnonDate = base.Columns["onDate"];
                this.columntradeAction = base.Columns["tradeAction"];
                this.columnprice = base.Columns["price"];
                this.columnqty = base.Columns["qty"];
                this.columnamt = base.Columns["amt"];
                this.columnstockQty = base.Columns["stockQty"];
                this.columncashAmt = base.Columns["cashAmt"];
                this.columnstockAmt = base.Columns["stockAmt"];
                this.columntotalAmt = base.Columns["totalAmt"];
                this.columnrevenue = base.Columns["revenue"];
                this.columnfeeAmt = base.Columns["feeAmt"];
                this.columnignored = base.Columns["ignored"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnonDate = new global::System.Data.DataColumn("onDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnonDate);
                this.columntradeAction = new global::System.Data.DataColumn("tradeAction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntradeAction);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnqty = new global::System.Data.DataColumn("qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqty);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnstockQty = new global::System.Data.DataColumn("stockQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstockQty);
                this.columncashAmt = new global::System.Data.DataColumn("cashAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncashAmt);
                this.columnstockAmt = new global::System.Data.DataColumn("stockAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstockAmt);
                this.columntotalAmt = new global::System.Data.DataColumn("totalAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalAmt);
                this.columnrevenue = new global::System.Data.DataColumn("revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrevenue);
                this.columnfeeAmt = new global::System.Data.DataColumn("feeAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfeeAmt);
                this.columnignored = new global::System.Data.DataColumn("ignored", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnignored);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnonDate}, true));
                this.columnonDate.AllowDBNull = false;
                this.columnonDate.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRow NewtradeEstimateRow() {
                return ((tradeEstimateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tradeEstimateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tradeEstimateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tradeEstimateRowChanged != null)) {
                    this.tradeEstimateRowChanged(this, new tradeEstimateRowChangeEvent(((tradeEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tradeEstimateRowChanging != null)) {
                    this.tradeEstimateRowChanging(this, new tradeEstimateRowChangeEvent(((tradeEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tradeEstimateRowDeleted != null)) {
                    this.tradeEstimateRowDeleted(this, new tradeEstimateRowChangeEvent(((tradeEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tradeEstimateRowDeleting != null)) {
                    this.tradeEstimateRowDeleting(this, new tradeEstimateRowChangeEvent(((tradeEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetradeEstimateRow(tradeEstimateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmpDS ds = new tmpDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tradeEstimateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class portfolioListDataTable : global::System.Data.TypedTableBase<portfolioListRow> {
            
            private global::System.Data.DataColumn columnstockExCode;
            
            private global::System.Data.DataColumn columnstockCode;
            
            private global::System.Data.DataColumn columnboughtPrice;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columnqty;
            
            private global::System.Data.DataColumn columnboughtAmt;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnpriceVariant;
            
            private global::System.Data.DataColumn columnprofitVariantAmt;
            
            private global::System.Data.DataColumn columnprofitVariantPerc;
            
            private global::System.Data.DataColumn columnvolume;
            
            private global::System.Data.DataColumn columnnotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListDataTable() {
                this.TableName = "portfolioList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal portfolioListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected portfolioListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stockExCodeColumn {
                get {
                    return this.columnstockExCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stockCodeColumn {
                get {
                    return this.columnstockCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn boughtPriceColumn {
                get {
                    return this.columnboughtPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qtyColumn {
                get {
                    return this.columnqty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn boughtAmtColumn {
                get {
                    return this.columnboughtAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceVariantColumn {
                get {
                    return this.columnpriceVariant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn profitVariantAmtColumn {
                get {
                    return this.columnprofitVariantAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn profitVariantPercColumn {
                get {
                    return this.columnprofitVariantPerc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn volumeColumn {
                get {
                    return this.columnvolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRow this[int index] {
                get {
                    return ((portfolioListRow)(this.Rows[index]));
                }
            }
            
            public event portfolioListRowChangeEventHandler portfolioListRowChanging;
            
            public event portfolioListRowChangeEventHandler portfolioListRowChanged;
            
            public event portfolioListRowChangeEventHandler portfolioListRowDeleting;
            
            public event portfolioListRowChangeEventHandler portfolioListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddportfolioListRow(portfolioListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRow AddportfolioListRow(string stockExCode, string stockCode, decimal boughtPrice, decimal price, decimal qty, decimal boughtAmt, decimal amt, decimal priceVariant, decimal profitVariantAmt, decimal profitVariantPerc, decimal volume, string notes) {
                portfolioListRow rowportfolioListRow = ((portfolioListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        stockExCode,
                        stockCode,
                        boughtPrice,
                        price,
                        qty,
                        boughtAmt,
                        amt,
                        priceVariant,
                        profitVariantAmt,
                        profitVariantPerc,
                        volume,
                        notes};
                rowportfolioListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowportfolioListRow);
                return rowportfolioListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRow FindBystockCode(string stockCode) {
                return ((portfolioListRow)(this.Rows.Find(new object[] {
                            stockCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                portfolioListDataTable cln = ((portfolioListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new portfolioListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstockExCode = base.Columns["stockExCode"];
                this.columnstockCode = base.Columns["stockCode"];
                this.columnboughtPrice = base.Columns["boughtPrice"];
                this.columnprice = base.Columns["price"];
                this.columnqty = base.Columns["qty"];
                this.columnboughtAmt = base.Columns["boughtAmt"];
                this.columnamt = base.Columns["amt"];
                this.columnpriceVariant = base.Columns["priceVariant"];
                this.columnprofitVariantAmt = base.Columns["profitVariantAmt"];
                this.columnprofitVariantPerc = base.Columns["profitVariantPerc"];
                this.columnvolume = base.Columns["volume"];
                this.columnnotes = base.Columns["notes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstockExCode = new global::System.Data.DataColumn("stockExCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstockExCode);
                this.columnstockCode = new global::System.Data.DataColumn("stockCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstockCode);
                this.columnboughtPrice = new global::System.Data.DataColumn("boughtPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnboughtPrice);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnqty = new global::System.Data.DataColumn("qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqty);
                this.columnboughtAmt = new global::System.Data.DataColumn("boughtAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnboughtAmt);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnpriceVariant = new global::System.Data.DataColumn("priceVariant", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriceVariant);
                this.columnprofitVariantAmt = new global::System.Data.DataColumn("profitVariantAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprofitVariantAmt);
                this.columnprofitVariantPerc = new global::System.Data.DataColumn("profitVariantPerc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprofitVariantPerc);
                this.columnvolume = new global::System.Data.DataColumn("volume", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvolume);
                this.columnnotes = new global::System.Data.DataColumn("notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstockCode}, true));
                this.columnstockCode.AllowDBNull = false;
                this.columnstockCode.Unique = true;
                this.columnpriceVariant.Caption = "revenue";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRow NewportfolioListRow() {
                return ((portfolioListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new portfolioListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(portfolioListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.portfolioListRowChanged != null)) {
                    this.portfolioListRowChanged(this, new portfolioListRowChangeEvent(((portfolioListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.portfolioListRowChanging != null)) {
                    this.portfolioListRowChanging(this, new portfolioListRowChangeEvent(((portfolioListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.portfolioListRowDeleted != null)) {
                    this.portfolioListRowDeleted(this, new portfolioListRowChangeEvent(((portfolioListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.portfolioListRowDeleting != null)) {
                    this.portfolioListRowDeleting(this, new portfolioListRowChangeEvent(((portfolioListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveportfolioListRow(portfolioListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmpDS ds = new tmpDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "portfolioListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tradeEstimateRow : global::System.Data.DataRow {
            
            private tradeEstimateDataTable tabletradeEstimate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tradeEstimateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletradeEstimate = ((tradeEstimateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime onDate {
                get {
                    return ((global::System.DateTime)(this[this.tabletradeEstimate.onDateColumn]));
                }
                set {
                    this[this.tabletradeEstimate.onDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tradeAction {
                get {
                    try {
                        return ((string)(this[this.tabletradeEstimate.tradeActionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tradeAction\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.tradeActionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal price {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'price\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal qty {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.qtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qty\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.qtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal amt {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amt\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stockQty {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.stockQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stockQty\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.stockQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cashAmt {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.cashAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cashAmt\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.cashAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stockAmt {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.stockAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stockAmt\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.stockAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalAmt {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.totalAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalAmt\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.totalAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal revenue {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.revenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'revenue\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.revenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal feeAmt {
                get {
                    try {
                        return ((decimal)(this[this.tabletradeEstimate.feeAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'feeAmt\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.feeAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ignored {
                get {
                    try {
                        return ((bool)(this[this.tabletradeEstimate.ignoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ignored\' in table \'tradeEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletradeEstimate.ignoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstradeActionNull() {
                return this.IsNull(this.tabletradeEstimate.tradeActionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettradeActionNull() {
                this[this.tabletradeEstimate.tradeActionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceNull() {
                return this.IsNull(this.tabletradeEstimate.priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceNull() {
                this[this.tabletradeEstimate.priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqtyNull() {
                return this.IsNull(this.tabletradeEstimate.qtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqtyNull() {
                this[this.tabletradeEstimate.qtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tabletradeEstimate.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tabletradeEstimate.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstockQtyNull() {
                return this.IsNull(this.tabletradeEstimate.stockQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstockQtyNull() {
                this[this.tabletradeEstimate.stockQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscashAmtNull() {
                return this.IsNull(this.tabletradeEstimate.cashAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcashAmtNull() {
                this[this.tabletradeEstimate.cashAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstockAmtNull() {
                return this.IsNull(this.tabletradeEstimate.stockAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstockAmtNull() {
                this[this.tabletradeEstimate.stockAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalAmtNull() {
                return this.IsNull(this.tabletradeEstimate.totalAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalAmtNull() {
                this[this.tabletradeEstimate.totalAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrevenueNull() {
                return this.IsNull(this.tabletradeEstimate.revenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrevenueNull() {
                this[this.tabletradeEstimate.revenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfeeAmtNull() {
                return this.IsNull(this.tabletradeEstimate.feeAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfeeAmtNull() {
                this[this.tabletradeEstimate.feeAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsignoredNull() {
                return this.IsNull(this.tabletradeEstimate.ignoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetignoredNull() {
                this[this.tabletradeEstimate.ignoredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class portfolioListRow : global::System.Data.DataRow {
            
            private portfolioListDataTable tableportfolioList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal portfolioListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableportfolioList = ((portfolioListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stockExCode {
                get {
                    try {
                        return ((string)(this[this.tableportfolioList.stockExCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stockExCode\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.stockExCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stockCode {
                get {
                    return ((string)(this[this.tableportfolioList.stockCodeColumn]));
                }
                set {
                    this[this.tableportfolioList.stockCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal boughtPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.boughtPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'boughtPrice\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.boughtPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal price {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'price\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal qty {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.qtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qty\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.qtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal boughtAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.boughtAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'boughtAmt\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.boughtAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal amt {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amt\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal priceVariant {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.priceVariantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'priceVariant\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.priceVariantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal profitVariantAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.profitVariantAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'profitVariantAmt\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.profitVariantAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal profitVariantPerc {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.profitVariantPercColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'profitVariantPerc\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.profitVariantPercColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal volume {
                get {
                    try {
                        return ((decimal)(this[this.tableportfolioList.volumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'volume\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.volumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tableportfolioList.notesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes\' in table \'portfolioList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableportfolioList.notesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstockExCodeNull() {
                return this.IsNull(this.tableportfolioList.stockExCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstockExCodeNull() {
                this[this.tableportfolioList.stockExCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsboughtPriceNull() {
                return this.IsNull(this.tableportfolioList.boughtPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetboughtPriceNull() {
                this[this.tableportfolioList.boughtPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceNull() {
                return this.IsNull(this.tableportfolioList.priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceNull() {
                this[this.tableportfolioList.priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqtyNull() {
                return this.IsNull(this.tableportfolioList.qtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqtyNull() {
                this[this.tableportfolioList.qtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsboughtAmtNull() {
                return this.IsNull(this.tableportfolioList.boughtAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetboughtAmtNull() {
                this[this.tableportfolioList.boughtAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tableportfolioList.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tableportfolioList.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceVariantNull() {
                return this.IsNull(this.tableportfolioList.priceVariantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceVariantNull() {
                this[this.tableportfolioList.priceVariantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprofitVariantAmtNull() {
                return this.IsNull(this.tableportfolioList.profitVariantAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprofitVariantAmtNull() {
                this[this.tableportfolioList.profitVariantAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprofitVariantPercNull() {
                return this.IsNull(this.tableportfolioList.profitVariantPercColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprofitVariantPercNull() {
                this[this.tableportfolioList.profitVariantPercColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvolumeNull() {
                return this.IsNull(this.tableportfolioList.volumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvolumeNull() {
                this[this.tableportfolioList.volumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotesNull() {
                return this.IsNull(this.tableportfolioList.notesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotesNull() {
                this[this.tableportfolioList.notesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tradeEstimateRowChangeEvent : global::System.EventArgs {
            
            private tradeEstimateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRowChangeEvent(tradeEstimateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tradeEstimateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class portfolioListRowChangeEvent : global::System.EventArgs {
            
            private portfolioListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRowChangeEvent(portfolioListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public portfolioListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591